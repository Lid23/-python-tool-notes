{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6a21\u677f","text":""},{"location":"#_2","title":"\u4ee3\u7801\u5757","text":"code1code2code3"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.1.%E5%8F%98%E9%87%8F/","title":"\u53d8\u91cf","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.1.%E5%8F%98%E9%87%8F/#_2","title":"\u53d8\u91cf\u5b9a\u4e49","text":"\u5c40\u90e8\u53d8\u91cf\u5168\u5c40\u53d8\u91cf\u5e38\u91cf\u5b9a\u4e49 <pre><code>def localVariable():\nword1 = 'world'\nword2 = 'all'\nword3 = 'need'\nprint(f'hello {word1}, Python is {word2} you {word3}')\nprint('hello {}, Python is {} you {}'.format(word1, word2, word3))\n</code></pre> <pre><code># \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\nglobalkey='globalkey'\n# \u5168\u5c40\u53d8\u91cf\uff0c\u6240\u6709\u51fd\u6570\u5185\u90e8\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\n# Author: Noodles\n# Date: 2023/6/25 14:12\ndef globalVariable1():\n# global\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\nglobal key\nkey = 'first key'\nprint(key)\nglobalkey = 'globalkey1'\nprint(globalkey)\ndef globalVariable2():\nprint(key)\nprint(globalkey)\nif __name__ == '__main__':\nglobalVariable1()\nglobalVariable2()\n</code></pre> <pre><code># \u7ea6\u5b9a\u4fd7\u79f0\u53d8\u91cf\u540d\u5168\u5927\u5199\u7684\u5f62\u5f0f\u8868\u793a\u4e00\u4e2a\u5e38\u91cf\nRESULT_SUCC='0000'\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"\u57fa\u672c\u6570\u636e\u7c7b\u578b","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_2","title":"\u5e03\u5c14\u7c7b\u578b","text":"\u5e03\u5c14\u64cd\u4f5c\u7b26 <pre><code>def testBoolean():\nT = True\nF = False\nprint(T | F)\nprint(T &amp; F)\nprint(not T)\nprint(T + 1)\nprint(F + 1)\nprint(T and F)\nprint(T or F)\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_3","title":"\u6574\u6570\u7c7b\u578b","text":"\u4f4d\u8fd0\u7b97\u4f4d\u79fb\u8fd0\u7b97\u64cd\u4f5c\u8fd0\u7b97\u8d4b\u503c\u64cd\u4f5c\u6bd4\u8f83\u8fd0\u7b97\u7b26 <pre><code>def testInt():\n# \u4e8c\u8fdb\u5236\na = 0b10101\nb = 0b11011\n# \u4f4d\u8fd0\u7b97\u64cd\u4f5c\u7b26\nprint(a | b)\nprint(a &amp; b)\nprint(a ^ b)\n</code></pre> <pre><code>def testInt():\n# \u4e8c\u8fdb\u5236\na = 0b10101\nb = 0b11011\n# \u4f4d\u79fb\u8fd0\u7b97(1.\u8d1f\u6570\u7684\u79fb\u4f4d\u8ba1\u6570\u4e3a\u975e\u6cd5\u64cd\u4f5c\uff0c\u53ef\u80fd\u5bfc\u81f4ValueError\u9519\u8bef)\nprint(a &lt;&lt; 2)\nprint(a &lt;&lt; 1)\nprint(a &gt;&gt; 1)\n</code></pre> <pre><code>def testOperation():\nA = 2\nB = 5\n# \u9664\u6cd5\u8fd0\u7b97\nprint(B / A)\n# \u53d6\u6a21\u8fd0\u7b97\uff0c\u8fd4\u56de\u9664\u6cd5\u7684\u4f59\u6570\nprint(B % A)\n# \u5e42\u8fd0\u7b97\nprint(A ** B)\n# \u6574\u9664\u8fd0\u7b97\uff0c\u8fd4\u56de\u5546\u7684\u6574\u6570\u90e8\u5206\uff08\u5411\u4e0b\u53d6\u6574\uff09\nprint(B // A)\n</code></pre> <pre><code>def testAssignment():\nA = 8\nA += 8\nprint(A)\nA -= 8\nprint(A)\nA *= 2\nprint(A)\nA /= 8\nprint(A)\nA %= 2\nprint(A)\n</code></pre> <pre><code>def testCompare():\nA = 3\nB = 2\nprint(A == B)\nprint(A != B)\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_4","title":"\u6d6e\u70b9\u6570","text":"\u6d6e\u70b9\u6570\u4ee3\u7801\u57572\u4ee3\u7801\u57573 <pre><code>def testFloat():\na = 0\nb = 0.0\n# \u6d6e\u70b9\u6570\u5b58\u50a8\u4f4d\u7f6e\nprint(id(a))\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_5","title":"\u590d\u6570\u7c7b\u578b","text":"\u590d\u6570\u7c7b\u578b\u4ee3\u7801\u57572\u4ee3\u7801\u57573 <pre><code>def testComplex():\nA = 3 + 4j\nB = 2 + 5j\nprint(A + B)\nprint(A.real)\nprint(A.imag)\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.2.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_6","title":"\u51fd\u6570","text":"\u8fd0\u7b97\u51fd\u6570\u8f6c\u6362\u51fd\u6570\u4ee3\u7801\u57573 <pre><code>def testOperationFunction():\nA = 3\nprint(abs(A))\nprint(bool(A))\nprint(complex(3, 4))\n# \u8fd4\u56de\u5bf9\u8c61A\u7684\u5185\u5b58\u5730\u5740\u6807\u8bc6\nprint(id(A))\n# \u56db\u820d\u4e94\u5165\uff0c\u82e5\u672a\u6307\u5b9a\u5c0f\u6570\u7684\u4f4d\u6570\uff0c\u5219\u8fd4\u56de\u6574\u6570\nprint(round(3.167, 2))\nprint(round(2.675, 2))\n# \u8ba1\u7b97x\u7684y\u6b21\u65b9\u5e76\u5bf9\u7ed3\u679c\u8fdb\u884cz\u53d6\u6a21 \u7b49\u4ef7\u4e3a pow(x, y) % z\nprint(pow(2, 3, 3))\n</code></pre> <pre><code>def testTypeConversionFunction():\nA = 33\n# \u8fd4\u56de\u4e00\u4e2a\u53ef\u6253\u5370\u7684\u5bf9\u8c61\u5b57\u7b26\u4e32\u65b9\u5f0f\u8868\u793a\uff0c\u5982\u679c\u662f\u975eascii\u5b57\u7b26\u5c31\u4f1a\u8f93\u51fa\\x,\\u\u6216\\U\u7b49\u5b57\u7b26\u6765\u8868\u793a\nprint(ascii(A))\nprint(ascii('\u4e2d\u6587'))\nprint(bin(65))\nprint(oct(65))\nprint(ord('A'))\nprint(hex(65))\n# int(x [,base]) base\u8868\u793a\u8981\u8f6c\u6362\u7684\u503c\u662f8\u8fdb\u5236\u6216\u800516\u8fdb\u5236\u8868\u793a\u7684\u6570\u5b57\nprint(int('20', 8))\nprint(int('0x64AF0', 16))\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99/","title":"\u5b57\u7b26\u4e32\u548c\u6b63\u5219","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99/#_2","title":"\u5b57\u7b26\u4e32\u5b9a\u4e49","text":"\u521d\u59cb\u5316\u8f6c\u4e49\u5b57\u7b26\u4ee3\u7801\u57573 <pre><code>def testString():\nA = 'dddddd'\nB = \"bbbbbb\"\nC = '''\n        \u4f60\u662f\u8c01\uff1f\n        \u4f60\u51e0\u5c81\uff1f\n    '''\nprint(A)\nprint(B)\nprint(C)\n</code></pre> <pre><code>def testEscapeCharacter():\nprint('per\\nfect')\nprint(r'per\\nfect')\nprint('per\\\\nfect')\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99/#_3","title":"\u5b57\u7b26\u4e32\u683c\u5f0f\u5316","text":"format\u683c\u5f0f\u5316%\u5b57\u7b26\u4e32\u683c\u5f0f\u5316%\u6574\u6570\u683c\u5f0f\u5316%\u6d6e\u70b9\u6570\u683c\u5f0f\u5316 <pre><code>def testStringFormatFunction():\n# [[fill]align][sign][#][0][width][,][.precision][type]\n# &gt; \u53f3\u5bf9\u9f50\nprint('{0:*&gt;10}'.format(6))\n# &gt; \u5de6\u5bf9\u9f50\nprint('{0:*&lt;10}'.format(6))\n# &gt; \u5c45\u4e2d\u5bf9\u9f50\nprint('{0:*^10}'.format(6))\n# \u7cbe\u5ea6\u4e0e\u8fdb\u5236\nprint('{0:.3f}'.format(1 / 7))\n# \u683c\u5f0f\u5316\u4e3a\u4e8c\u8fdb\u5236/\u5341\u516d\u8fdb\u5236/\u516b\u8fdb\u5236\nprint('{0:b}'.format(100))\nprint('{0:x}'.format(100))\nprint('{0:o}'.format(100))\n# \u4f4d\u7f6e\u5bf9\u5e94\nA = ['World', 'Life']\nprint('This is our {}, this is my {}'.format(*A))\nprint('This is our {1}, this is my {0}'.format(*A))\nprint('This is our {1}, this is my {0}{0}'.format(*A))\nprint('This is our {}, this is my {}'.format('785', '7856'))\n</code></pre> <pre><code>def testStringFormat():\n# % [(name)][flags][width].[precision]typecode\n# % [\u547d\u540d][\u5bf9\u9f50\u65b9\u5f0f][\u663e\u793a\u5bbd\u5ea6].[\u5c0f\u6570\u70b9\u540e\u7cbe\u5ea6]\u683c\u5f0f\u5316\u64cd\u4f5c\u7b26\n# %s\u5b57\u7b26\u4e32\u7684\u7b80\u5355\u4f7f\u7528\nstring = 'hello'\nprint('string=%s' % string)\n# %2s\u610f\u601d\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a2\uff0c\u5f53\u539f\u5b57\u7b26\u4e32\u957f\u5ea6\u8d85\u8fc72\u65f6\uff0c\u6309\u539f\u957f\u5ea6\u6253\u5370\nprint('string=%2s' % string)\n# %7s\u610f\u601d\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a7\uff0c\u5f53\u539f\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e7\u65f6\uff0c\u5728\u539f\u5b57\u7b26\u4e32\u5de6\u4fa7\u8865\u7a7a\u683c\nprint('string=%7s' % string)\n# %-7s\u610f\u601d\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a7\uff0c\u5f53\u539f\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e7\u65f6\uff0c\u5728\u539f\u5b57\u7b26\u4e32\u53f3\u4fa7\u8865\u7a7a\u683c\nprint('string=%-7s' % string)\nprint('string=%-7s!' % string)\n# %.2s\u610f\u601d\u662f\u622a\u53d6\u5b57\u7b26\u4e32\u7684\u524d\u4e24\u4e2a\u5b57\u7b26\nprint('string=%-.2s' % string)\n</code></pre> <pre><code>def testStringFormat():\n# % [(name)][flags][width].[precision]typecode\n# % [\u547d\u540d][\u5bf9\u9f50\u65b9\u5f0f][\u663e\u793a\u5bbd\u5ea6].[\u5c0f\u6570\u70b9\u540e\u7cbe\u5ea6]\u683c\u5f0f\u5316\u64cd\u4f5c\u7b26\n# %d\u6574\u6570\u7684\u7b80\u5355\u4f7f\u7528\nnum = 14\nprint('num=%d' % num)\n# %1d\u610f\u601d\u662f\u6253\u5370\u7ed3\u679c\u4e3a1\u4f4d\u6574\u6570\uff0c\u5f53\u6574\u6570\u7684\u4f4d\u6570\u8d85\u8fc71\u4f4d\u65f6\uff0c\u6309\u6574\u6570\u539f\u503c\u6253\u5370\nprint('num=%1d' % num)\n# %3d\u610f\u601d\u662f\u6253\u5370\u7ed3\u679c\u4e3a3\u4f4d\u6574\u6570\uff0c\u5f53\u6574\u6570\u7684\u4f4d\u6570\u4e0d\u591f3\u4f4d\u65f6\uff0c\u5728\u6574\u6570\u5de6\u4fa7\u8865\u7a7a\u683c\nprint('num=%3d' % num)\n# %-3d\u610f\u601d\u662f\u6253\u5370\u7ed3\u679c\u4e3a3\u4f4d\u6574\u6570\uff0c\u5f53\u6574\u6570\u7684\u4f4d\u6570\u4e0d\u591f3\u4f4d\u65f6\uff0c\u5728\u6574\u6570\u5de6\u4fa7\u8865\u7a7a\u683c\nprint('num=%-3d' % num)\n# %05d\u610f\u601d\u662f\u6253\u5370\u7ed3\u679c\u4e3a5\u4f4d\u6574\u6570\uff0c\u5f53\u6574\u6570\u7684\u4f4d\u6570\u4e0d\u591f5\u4f4d\u65f6\uff0c\u5728\u6574\u6570\u5de6\u4fa7\u88650\nprint('num=%05d' % num)\n# %.3d\u610f\u601d\u662f\u6253\u5370\u7ed3\u679c\u4e3a3\u4f4d\u6574\u6570\uff0c\u5f53\u6574\u6570\u7684\u4f4d\u6570\u4e0d\u591f3\u4f4d\u65f6\uff0c\u5728\u6574\u6570\u5de6\u4fa7\u88650\nprint('num=%.3d' % num)\n</code></pre> <pre><code>def testStringFormat():\n# % [(name)][flags][width].[precision]typecode\n# % [\u547d\u540d][\u5bf9\u9f50\u65b9\u5f0f][\u663e\u793a\u5bbd\u5ea6].[\u5c0f\u6570\u70b9\u540e\u7cbe\u5ea6]\u683c\u5f0f\u5316\u64cd\u4f5c\u7b26\n# %f\u6d6e\u70b9\u6570\u7684\u7b80\u5355\u4f7f\u7528\n# %a.bf, a\u8868\u793a\u6d6e\u70b9\u6570\u7684\u6253\u5370\u957f\u5ea6\uff0cb\u8868\u793a\u6d6e\u70b9\u6570\u5c0f\u6570\u70b9\u540e\u9762\u7684\u7cbe\u5ea6\n# %f\u8868\u793a\u539f\u503c\uff0c\u9ed8\u8ba4\u662f\u5c0f\u6570\u70b9\u540e5\u4f4d\u6570\nprint(\"PI=%f\" % math.pi)\n# %9f\u8868\u793a\u6253\u5370\u957f\u5ea6\u4e3a9\u4f4d\u6570\uff0c\u5c0f\u6570\u70b9\u4e5f\u5360\u4e00\u4f4d\uff0c\u4e0d\u591f\u5de6\u4fa7\u8865\u7a7a\u683c\nprint(\"PI=%9f\" % math.pi)\n# \u53ea\u6709.\u6ca1\u6709\u540e\u9762\u7684\u6570\u5b57\u65f6\uff0c\u8868\u793a\u53bb\u6389\u5c0f\u6570\u8f93\u51fa\u6574\u6570\uff0c03\u8868\u793a\u4e0d\u591f3\u4f4d\u6570\u5de6\u4fa7\u88650\nprint(\"PI=%03.f\" % math.pi)\n# %6.3f\u8868\u793a\u5c0f\u6570\u70b9\u540e\u9762\u7cbe\u786e\u52303\u4f4d\uff0c\u603b\u957f\u5ea6\u4e3a6\u4f4d\u6570\uff0c\u5305\u62ec\u5c0f\u6570\u70b9\uff0c\u4e0d\u591f\u5de6\u4fa7\u8865\u7a7a\u683c\nprint(\"PI=%6.3f\" % math.pi)\n# %-6.3f\u8868\u793a\u5c0f\u6570\u70b9\u540e\u9762\u7cbe\u786e\u52303\u4f4d\uff0c\u603b\u957f\u5ea6\u4e3a6\u4f4d\u6570\uff0c\u5305\u62ec\u5c0f\u6570\u70b9\uff0c\u4e0d\u591f\u53f3\u4fa7\u8865\u7a7a\u683c\nprint(\"PI=%-6.3f\" % math.pi)\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99/#_4","title":"\u5b57\u7b26\u4e32\u5e38\u7528\u51fd\u6570","text":"\u67e5\u627e\u66ff\u6362\u5224\u65ad\u51fd\u6570trip()len\u548ccount\u5927\u5c0f\u5199\u5bf9\u9f50\u548c\u586b\u5145 <pre><code>def testStringFunction():\n# \u9996\u5b57\u6bcd\u5927\u5199\nA = ' how old are you '\n# \u67e5\u627e l \u5728\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u82e5\u4e0d\u5b58\u5728find\u8fd4\u56de-1\uff0cindex\u5219\u62a5\u9519\nprint(\"find\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e:\", A.find('l'))\nprint(\"index\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e:\", A.index('l'))\n# \u67e5\u627e\u66ff\u6362\nprint(A.replace('you', 'you!'))\n</code></pre> <pre><code>def testStringFunction():\n# \u5b57\u7b26\u4e32\u5224\u65ad\u7684\u51fd\u6570\nB = 'abC123'\n# \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u90e8\u4e3a\u5b57\u6bcd\u548c\u6570\u5b57\uff0c\u5e76\u4e14\u4e0d\u4e3a\u7a7a\nprint(B.isalnum())\n# \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u90e8\u4e3a\u5b57\u6bcd\uff0c\u5e76\u4e14\u4e0d\u4e3a\u7a7a\nprint(B.isalpha())\n# \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u90e8\u4e3a\u6570\u5b57\uff0c\u5e76\u4e14\u4e0d\u4e3a\u7a7a\nprint(B.isdigit())\n# \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u90e8\u4e3a\u7a7a\u767d\u5b57\u7b26\nprint(B.isspace())\n# \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u90e8\u4e3a\u5c0f\u5199\u5b57\u6bcd\nprint(B.islower())\n# \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u90e8\u4e3a\u5927\u5199\u5b57\u6bcd\nprint(B.isupper())\n# \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u9996\u5b57\u6bcd\u5927\u5199\nprint(B.istitle())\n</code></pre> <pre><code>def testStringFunction():\n# \u9996\u5b57\u6bcd\u5927\u5199\nA = ' how old are you '\n# \u5b57\u7b26\u4e32\u53bb\u7a7a\u683c,\u53bb\u6389\u6307\u5b9a\u5b57\u7b26\nprint(A.strip())\nprint(A.strip().strip('h'))\nprint(A.lstrip().lstrip('h'))\nprint(A.rstrip().rstrip('u'))\n</code></pre> <pre><code>def testStringFunction():\n# \u5b57\u7b26\u4e32\u957f\u5ea6\nprint(\"\u5b57\u7b26\u4e32\u957f\u5ea6\uff1a\", len(A))\n# \u67e5\u627e l \u5728\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\nprint(\"\u5b57\u7b26\u5728\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff1a\", A.count('l'))\n</code></pre> <pre><code>def testStringFunction():\n# \u9996\u5b57\u6bcd\u5927\u5199\nA = ' how old are you '\nprint(A.capitalize())\nB = 'abC123'\n# \u8f6c\u6362\u5927\u5c0f\u5199\nprint(\"\u8f6c\u6362\u4e3a\u5c0f\u5199\uff1a\", B.lower())\nprint(\"\u8f6c\u6362\u4e3a\u5927\u5199\uff1a\", B.upper())\nprint(\"\u5927\u5c0f\u5199\u4e92\u6362\uff1a\", B.swapcase())\nprint(\"\u9996\u5b57\u6bcd\u5927\u5199:\", B.capitalize())\n</code></pre> <pre><code>def testStringFunction():\n# \u5c06\u5b57\u7b26\u4e32\u4e32\u653e\u5165\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u53ef\u6307\u5b9a\u957f\u5ea6\u4ee5\u53ca\u4f4d\u7f6e\u4e24\u8fb9\u5b57\u7b26\na = \"hello world\"\nprint(a.center(20, '*'))\nprint('{:&gt;8}'.format('3.14'))\nprint('{:&lt;8}'.format('3.14'))\nprint('{:^8}'.format('3.14'))\nprint('3.14'.rjust(10))\nprint('3.14'.ljust(10))\nprint('3.14'.center(10))\n# zfill\u8fdb\u884c0\u586b\u5145\nprint('3.14'.zfill(8))\nprint('3.14'.zfill(20))\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99/#_5","title":"\u5b57\u7b26\u4e32\u7f16\u8f91","text":"\u5206\u5272\u5207\u7247\u4ee3\u7801\u57573 <pre><code>def testStringSplit():\n# \u5b57\u7b26\u4e32\u5206\u5272\u622a\u53d6\nA = 'djuf dhwd dwb'\nprint(A.split())\nA = 'djuf,dhwd,dwb'\nprint(A.split(','))\nA = 'djufldhwdldwb'\nprint(A.split('l'))\n# \u5b57\u7b26\u4e32\u62fc\u63a5\nA = ['Hello', ' ', 'World', '!']\nprint(''.join(A))\nprint('AAAA'.join(A))\n</code></pre> <pre><code>def testStringSection():\nstr = \"0123456789\"\nprint(f\"{str}\u622a\u53d6\u7b2c\u4e00\u4f4d\u5230\u7b2c\u4e09\u4f4d\u7684\u5b57\u7b26\uff1a{str[0:3]}\")\nprint(f\"{str}\u622a\u53d6\u5168\u90e8\u5b57\u7b26\uff1a{str[:]}\")\nprint(f\"{str}\u622a\u53d6\u7b2c7\u4e2a\u5b57\u7b26\u5230\u7ed3\u5c3e\uff1a{str[6:]}\")\nprint(f\"{str}\u622a\u53d6\u4ece\u62d6\u5f00\u59cb\u5230\u7b2c3\u4e2a\u5b57\u7b26\u4e4b\u95f4\uff1a{str[:-3]}\")\nprint(f\"{str}\u622a\u53d6\u7b2c3\u4e2a\u5b57\u7b26\uff1a{str[2]}\")\nprint(f\"{str}\u622a\u53d6\u5012\u6570\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff1a{str[-1]}\")\nprint(f\"{str}\u521b\u9020\u4e00\u4e2a\u4e0e\u539f\u5b57\u7b26\u4e32\u987a\u5e8f\u76f8\u53cd\u7684\u5b57\u7b26\u4e32\uff1a{str[::-1]}\")\nprint(f\"{str}\u622a\u53d6\u5012\u6570\u7b2c\u4e09\u4e2a\u5230\u5012\u6570\u7b2c\u4e00\u4e2a\u4e4b\u95f4\u7684\u5b57\u7b26\uff1a{str[-3:-1]}\")\nprint(f\"{str}\u622a\u53d6\u5012\u6570\u7b2c\u4e09\u4e2a\u5230\u7ed3\u5c3e\u7684\u5b57\u7b26\uff1a{str[-3:]}\")\nprint(f\"{str}\u9006\u5e8f\u622a\u53d6\uff0c\u622a\u53d6\u5012\u6570\u7b2c5\u4f4d\u6570\u4e0e\u5012\u6570\u7b2c\u4e09\u4f4d\u6570\u4e4b\u95f4\uff1a{str[:-5:-3]}\")\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99/#_6","title":"\u6b63\u5219\u8868\u8fbe\u5f0f","text":"match()search()compile()findall()finditer()sub() <pre><code># \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u51fd\u6570match()\n# match()\u51fd\u6570\u8bd5\u56fe\u4ece\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u90e8\u5206\u5bf9\u6a21\u5f0f\u8fdb\u884c\u5339\u914d\u3002\u5982\u679c\u5339\u914d\u6210\u529f\n# \u5219\u8fd4\u56deMatchObject \u5bf9\u8c61\u5b9e\u4f8b\uff0c\u5982\u679c\u4e0d\u662f\u8d77\u59cb\u4f4d\u7f6e\u5339\u914d\u6210\u529f\u7684\u8bdd\uff0c\u5c31\u8fd4\u56deNone\n# Author: Noodles\n# Date: 2023/5/18 9:07\ndef testReMatch():\nprint(re.match('We', 'We are family').span())\nprint(re.match('are', 'We are family'))\ns = 'abc123abc'\nprint(re.match('[a-z]+', s))\nprint(re.match('[a-z]+', s).group(0))\nprint(re.match('[\\d]+', s))\nprint(re.match('[A-Z]+', s, re.I).group(0))\nprint(re.match('[a-z]+', s).span())\n</code></pre> <pre><code># search()\u51fd\u6570\u626b\u63cf\u6574\u4e2a\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6210\u529f\u7684\u5339\u914d\uff0c\u5339\u914d\u6210\u529f\uff0c\u8fd4\u56deMatchObject\u5bf9\u8c61\u5b9e\u4f8b\n# \u5426\u5219\u8fd4\u56de None\n# Author: Noodles\n# Date: 2023/5/18 9:15\ndef testReSearch():\nprint(re.search('We', 'We are family').span())\nprint(re.search('are', 'We are family').span())\ns = 'abc123abc'\nprint(re.search('[a-z]+', s).group())\nprint(re.search('[a-z]+', s).span(0))\nprint(re.search('[\\d]+', s).group())\nprint(re.search('[\\d]+', s).span())\nprint(re.search('[A-Z]+', s, re.I).group(0))\nprint(re.search('xyz', s))\nprint(re.search('([a-z]+)([\\d]+)', s).groups())\n</code></pre> <pre><code># compile()\u51fd\u6570\u7528\u4e8e\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\n# \u751f\u6210\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff08Pattern\uff09\u5bf9\u8c61,\n# \u4f9bmatch()\u548csearch()\u51fd\u6570\u4f7f\u7528\n# Author: Noodles\n# Date: 2023/5/18 9:56\ndef testReCompile():\ns = 'Python is a very easy to use programming language'\np = re.compile(r'to')  # \u67e5\u627e to\nprint(p.match(s))\nprint(p.search(s))\n</code></pre> <pre><code># findall\u51fd\u6570\u4e0ematch\u548csearch\u51fd\u6570\u7684\u533a\u522b\u5c31\u662f\uff0c\u524d\u8005\u662f\n# \u5339\u914d\u6240\u6709\uff0c\u540e\u4e24\u8005\u5c31\u53ea\u5339\u914d\u4e00\u6b21\n# Author: Noodles\n# Date: 2023/5/18 10:00\ndef testReFindall():\ns = 'abc123def456'\nprint(re.findall('[a-z]+', s))\nprint(re.findall('[0-9]+', s))\nstr = 'abc 123 def 456'\np = re.compile('((\\w+)\\s+\\w+)')\nprint(p.findall(str))\npp = re.compile('(\\w+)')\nprint(pp.findall(str))\np1 = re.compile('(\\w+)\\s+\\w+')\nprint(p1.findall(str))\n</code></pre> <pre><code># \u67e5\u627e\u6b63\u5219\u8868\u8fbe\u5f0f\u6240\u5339\u914d\u7684\u6240\u6709\u5b50\u4e32\uff0c\u5e76\u628a\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u8fed\u4ee3\u5668\u8fd4\u56de\n# Author: Noodles\n# Date: 2023/5/19 8:08\ndef testReFinditer():\ncontent = '''email:123456789@163.com\n        email:23456789@163.com\n        email:3456789@163.com\n        '''\nresult_finditer = re.finditer(r'\\d+@\\w+.com', content)\nfor i in result_finditer:\nprint(i.group())\nresult_finditer = re.finditer(r'(\\d+)@(\\w+).com', content)\nfor i in result_finditer:\nprint(i.group(1) + ' ' + i.group(2))\nresult_findall = re.findall(r'(\\d+)@(\\w+).com', content)\nfor i in result_findall:\nprint(i[0] + ' ' + i[1])\n</code></pre> <p>```py linenums=\"1\" def func(m):     return m.group(1).title() + ' ' + m.group(2).title()</p> <p>\u200b       # sub() \u5c06\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u90e8\u5206\u8fdb\u884c     # \u67d0\u79cd\u5f62\u5f0f\u7684\u66ff\u6362\uff0c\u7528\u6765\u66ff\u6362\u7684\u90e8\u5206\u901a\u5e38\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c     # \u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u8fd4\u56de\u5b57\u7b26\u4e32\u51fd\u6570\uff0c\u8fd4\u56de\u66ff\u6362\u540e\u7684\u5b57\u7b26\u4e32     # Author: Noodles     # Date: 2023/5/19 8:22     def testReSub():         p = re.compile(r'(\\w+) (\\w+)')         s = 'i say, hello world!'</p> <pre><code>    print(p.sub(r'\\2 \\1', s))\n    print(p.sub(func, s))\n\n    print(p.subn(r'\\2 \\1', s))\n    print(p.subn(func, s))\n\n```\n</code></pre> split()group()groupExtend() <pre><code># \u6307\u5b9a\u5206\u9694\u7b26\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5207\u7247\n# Author: Noodles\n# Date: 2023/5/19 8:34\ndef testReSplit():\ns = 'We are family'\nprint(re.split(' ', s))\n# \u53ea\u5206\u5272\u4e00\u6b21\nprint(re.split(' ', s, 1))\n</code></pre> <pre><code># \u5206\u7ec4\u5c31\u662f\u7528\u4e00\u5bf9()\u62ec\u8d77\u6765\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\n# \u5339\u914d\u51fa\u7684\u5185\u5bb9\u5c31\u8868\u793a\u4e00\u4e2a\u5206\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u5de6\u62ec\u53f7\"(\"\u8868\u793a\u7b2c\u4e00\u4e2a\u5206\u7ec4\n# \u7b2c\u4e8c\u4e2a\u8868\u793a\u7b2c\u4e8c\u4e2a\u5206\u7ec4\uff0c\u9690\u542b\u5168\u5c40\u5206\u7ec4\u5c31\u662f0\uff0c\u5c31\u662f\u6574\u4e2a\u8868\u8fbe\u5f0f\n# Author: Noodles\n# Date: 2023/5/19 8:38\ndef testReGroup():\ns = 'a1b2 c3d4 ea7f'\np1 = re.compile(r'[a-z]\\d[a-z]\\d')\nprint(re.findall(p1, s))\np2 = re.compile(r'[a-z]\\d[a-z](\\d)')\nprint(re.findall(p2, s))\np3 = re.compile(r'[a-z](\\d)[a-z](\\d)')\nprint(re.findall(p3, s))\ns = 'name:Python,age:10;name:world,age:20'\np = re.compile(r'name:(\\w+),age:(\\d+)')\nit = re.finditer(p, s)\nfor m in it:\nprint('------------')\nprint(m.group())\nprint(m.group(0))\nprint(m.group(1))\nprint(m.group(2))\n# \u5339\u914d\u5bf9\u8c61\u4e0e\u7ec4\u7684\u4f7f\u7528\ns = 'Python@163.com'\np = r'(\\w{4,20})@(163|qq|gmail|outlook)\\.(com)'\nn = re.match(p, s)\nprint(n.group())\nprint(n.group(1))\nm = re.match(r'(\\w+) (\\w+)', 'We are family')\nprint(m.group(0))\nprint(m.group(1))\nprint(m.group(1, 2))\nprint('----------------------')\n# \u5339\u914d\u5bf9\u8c61\u4e0e\u7d22\u5f15\u7684\u4f7f\u7528\nm = re.match(r'www\\.(.*)\\..{3}', 'www.python.org')\nprint(m.group())\nprint(m.group(0))\nprint(m.group(1))\nprint(m.start(1))\nprint(m.end(1))\nprint(m.span(1))\n</code></pre> <pre><code># \u5206\u7ec4\u6269\u5c55\n# (?...)\u662f\u4e00\u4e2a\u6269\u5c55\u6ce8\u8bb0\u7b26\uff0c\n# Author: Noodles\n# Date: 2023/5/19 9:10\ndef testReGroupExtend():\nprint(re.findall(r'(?i)yes', 'yes! Yes.. YES??'))\nprint(re.findall(r'(?i)p\\w+', 'Python is a very easy to use programming language'))\nprint(re.findall(r'(?im)(^th[\\w ]+)', \"\"\"\nThis is the first,\nanother line,\nthat line, it's the best\n    \"\"\"))\nprint('----------------------------')\n# (?:....)\uff0c\u5e38\u89c4\u62ec\u53f7\u7684\u975e\u6355\u83b7\u7248\u672c\uff0c\u5339\u914d\u62ec\u53f7\u5185\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u5728\u6267\u884c\u5339\u914d\u540e\u6216\u5728\u6a21\u5f0f\u4e2d\u7a0d\u540e\u5f15\u7528\u65f6\uff0c\u4e0d\u80fd\u68c0\u7d22\u7ec4\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\np = re.match(r'(?:[abcd])(color)', 'acolor')\nif p is not None:\nprint('p.gruop() == %s'%p.group())\nelse:\nprint('p.gruop() == None')\nprint('p.gruops() == %s'%str(p.groups()))\nprint('----------------------------')\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.4.%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/","title":"\u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.4.%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_2","title":"\u8fd0\u7b97\u7b26","text":"is@isnotcodecode <pre><code>def testIsAndIsNot():\na = 10\nb = 10\nif a is b:\nprint('a \u548c b \u6709\u76f8\u540c\u7684\u6807\u8bc6')\nelse:\nprint('a \u548c b \u6ca1\u6709\u76f8\u540c\u7684\u6807\u8bc6')\nb = 30\nif a is not b:\nprint('a \u548c b \u6ca1\u6709\u76f8\u540c\u7684\u6807\u8bc6')\nelse:\nprint('a \u548c b \u6709\u76f8\u540c\u7684\u6807\u8bc6')\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.4.%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_3","title":"\u8868\u8fbe\u5f0f","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.5.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/","title":"\u6d41\u7a0b\u63a7\u5236","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.5.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#ifelse","title":"IfElse","text":"ifElsecodecode <pre><code>def testIf():\na = 20\nif a &gt; 10:\nprint('\u4f60\u8f93\u5165\u7684\u6570\u6bd410\u5927\uff1a', a)\nelse:\nprint('\u4f60\u8f93\u5165\u7684\u6570\u6bd410\u5c0f\uff1a', a)\nage = 101\nif age &lt; 1 or age &gt; 100:\nprint('\u8bf7\u91cd\u65b0\u8f93\u5165\u5e74\u9f84!')\nreturn\nif age == 1:\nprint('\u76f8\u5f53\u4e8e14\u5c81\u7684\u4eba')\nelif age == 2:\nprint('\u76f8\u5f53\u4e8e22\u5c81\u7684\u4eba')\nelif age &gt; 2:\nhuman = 22 + (age - 2) * 5\nprint('\u5bf9\u5e94\u4eba\u7c7b\u5e74\u9f84\uff1a', human)\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.5.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_2","title":"\u5faa\u73af","text":"whileforcode <pre><code>def testWhile():\na = 5\nb = 2\nwhile a &gt; 0:\nb = b * 2\nprint('b\u7684\u503c\u662f\uff1a', b)\na = a - 1\nelse:\nprint(a, '\u4e0d\u5927\u4e8e0')\nprint('\u7a0b\u5e8f\u7ed3\u675f')\nusername = 'a'\npassword = '123'\ni = 0\nwhile i &lt; 3:\nname = 'a'\npwd = '123'\nif name == username and pwd == password:\nprint('\u767b\u5f55\u6210\u529f')\n# \u9000\u51fa\u5faa\u73af\nbreak\nelse:\nprint('\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef')\ni += 1\n</code></pre> <pre><code>def testFor():\na = ['1', '2', '3']\nfor idx in range(len(a)):\nprint('\u5f53\u524d\u7684\u6570\u5b57\u662f\uff1a', a[idx])\nlist1 = ['1', '2', '3', '4', '5']\nfor idx in list1:\nif idx == '4':\nprint('\u627e\u5230\u6570\u5b57\uff01')\ncontinue\nprint(idx)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.5.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/#_3","title":"\u4e2d\u65ad\u8bed\u53e5","text":"passcontinuebreak <pre><code>def testPass():\nfor s in '\u52aa\u529b\u5b66\u4e60':\nif s == '\u5b66':\npass\nprint('\u6267\u884cpass\u8bed\u53e5')\nprint('\u5f53\u671f\u8f93\u51fa\u662f\uff1a', s)\n</code></pre> <pre><code>def testContinue():\nfor s in '\u52aa\u529b\u5b66\u4e60':\nif s == '\u5b66':\nprint('\u6267\u884ccontinue\u8bed\u53e5')\ncontinue\nprint('\u5f53\u671f\u8f93\u51fa\u662f\uff1a', s)\n</code></pre> <pre><code>def testBreak():\nfor s in '\u52aa\u529b\u5b66\u4e60':\nif s == '\u5b66':\nprint('\u6267\u884cbreak\u8bed\u53e5')\nbreak\nprint('\u5f53\u671f\u8f93\u51fa\u662f\uff1a', s)\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.6.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97/","title":"\u4e3b\u9898","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.6.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97/#_2","title":"\u51fd\u6570","text":"\u5b9a\u4e49\u51fd\u6570\u4f20\u53c2code <pre><code>def student(name, sex, age, school='\u52b3\u52a8\u5927\u5b66'):\n#\u8f93\u51fa\u5b66\u751f\u57fa\u672c\u4fe1\u606f\nprint(f'\u8be5\u5b66\u751f\u59d3\u540d\uff1a{name}')\nprint(f'\u8be5\u5b66\u751f\u6027\u522b\uff1a{sex}')\nprint(f'\u8be5\u5b66\u751f\u5e74\u9f84\uff1a{age}')\nprint(f'\u8be5\u5b66\u751f\u5b66\u6821\uff1a{school}')\n</code></pre> <pre><code>def fun_a(fun, *args, **kwargs):\nprint(fun(*args, **kwargs))\ndef fun_b(*args):\nreturn args\nif __name__ == '__main__':\nfun_a(fun_b, 1, 2, 3)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.6.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97/#lambda","title":"Lambda","text":"\u5b9a\u4e49lambda maplambda reduce lambda filter <pre><code>def testLambda():\ng = lambda x: x ** 2\nprint(g(4))\n</code></pre> <pre><code>def testMap():\n'''\n    map\u7ed3\u5408lambda\u51fd\u6570\uff0c\u4f1a\u904d\u5386\u7ed9\u5b9a\u7684\u8fed\u4ee3\u5bf9\u8c61\n    '''\n# \u6bd4\u5982\u4e4b\u524d\u7528zip\u51fd\u6570\u8fdb\u884c\u5217\u8868\u5143\u7d20\u76f8\u52a0\u7684\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u7528map\u548clambda\u7ed3\u5408\u7684\u64cd\u4f5c\nnums1 = [11, 22, 33]\nnums2 = [1, 2, 3]\nresults = map(lambda a, b: a + b, nums1, nums2)  # \u6b64\u65f6\u7684results\u662f\u4e00\u4e2a\u7c7b\u5bf9\u8c61\uff0c\u9700\u8981list\u8f6c\u6362\nresults = list(results)\nprint(results)\n</code></pre> <pre><code>def testReduce():\n'''\n    reduce() \u51fd\u6570\u4f1a\u5bf9\u53c2\u6570\u5e8f\u5217\u4e2d\u5143\u7d20\u8fdb\u884c\u7d2f\u79ef\u3002\n    \u51fd\u6570\u5c06\u4e00\u4e2a\u6570\u636e\u96c6\u5408\uff08\u94fe\u8868\uff0c\u5143\u7ec4\u7b49\uff09\u4e2d\u7684\u6240\u6709\u6570\u636e\u8fdb\u884c\u4e0b\u5217\u64cd\u4f5c\uff1a\n    \u7528\u4f20\u7ed9 reduce \u4e2d\u7684\u51fd\u6570 function\uff08\u6709\u4e24\u4e2a\u53c2\u6570\uff09\u5148\u5bf9\u96c6\u5408\u4e2d\u7684\u7b2c 1\u30012 \u4e2a\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\uff0c\n    \u5f97\u5230\u7684\u7ed3\u679c\u518d\u4e0e\u7b2c\u4e09\u4e2a\u6570\u636e(\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\uff0c\u6b64\u65f6\u5c5e\u4e8e\u7b2c2\u4e2a\u6570\u636e)\u7528 function \u51fd\u6570\u8fd0\u7b97\uff0c\u6700\u540e\u5f97\u5230\u4e00\u4e2a\u7ed3\u679c\u3002\n    '''\nli = [1, 2, 3, 4]\nresult = reduce(lambda a, b: a + b, li)\nprint(result)\n# \u4e0d\u8fc7\u4e0a\u9762\u5199\u6cd5\u592a\u590d\u6742\u4e86\u4e86\uff0c\u53ea\u662f\u4e3a\u4e86\u9632\u6b62\u6709\u65f6\u5019\u770b\u5230\u76f8\u5173\u4ee3\u7801\uff0c\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u610f\u601d\uff0c\n# \u5176\u5b9e\u4e0a\u9762\u5c31\u662f\u5bf9\u5217\u8868\u6c42\u548c\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u501f\u52a9numpy\u4e2d\u7684\u65b9\u6cd5\uff08\u5f53LeetCode\u4e0d\u7ed9\u4f7f\u7528numpy\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6c42\u5217\u8868\u548c\uff09\n</code></pre> <pre><code>def testFilter():\n'''\n    filter() \u5bf9\u4e8e\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u7b5b\u9009\uff0c\u6700\u7ec8\u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684\u5e8f\u5217\n    '''\nli = [11, 22, 33]\nnew_list = filter(lambda a: a &gt; 22, li)\nnew_list = list(new_list)\nprint(new_list)\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.6.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97/#_3","title":"\u6a21\u5757","text":"dirglobals()&amp;locals()mod.pytestmod.py <pre><code># dir()\u5185\u7f6e\u51fd\u6570\u8fd4\u56de\u5305\u542b\u6a21\u5757\u5b9a\u4e49\u7684\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u7684\u6392\u5e8f\u5217\u8868\n# Author: Noodles\n# Date: 2023/5/17 10:23\ndef testDir():\nprint(dir(math))\n</code></pre> <pre><code># globals()\u51fd\u6570\u548clocals()\u51fd\u6570\u53ef\u7528\u4e8e\u8fd4\u56de\u5168\u5c40\u548c\u672c\u5730\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540d\u79f0\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u8c03\u7528\u4ed6\u4eec\u7684\u4f4d\u7f6e\n# Author: Noodles\n# Date: 2023/5/17 10:24\ndef testGlobalsAndLocals():\nprint(f'globals():{globals()}')\nprint(f'locals():{locals()}')\n</code></pre> <pre><code>s = '\u6765\u554a\uff01.'\na = [100, 200, 300]\ndef foo(arg):\nprint(f'arg = {arg}')\nclass Foo:\npass\n</code></pre> <pre><code>if __name__ == '__main__':\nprint(mod.s)\nprint(mod.a)\nmod.foo(['quux', 'corge', 'grault'])\nprint(mod.Foo())\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.7.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/","title":"\u5f02\u5e38\u5904\u7406","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.7.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#_2","title":"\u5f02\u5e38","text":"\u5f02\u5e38\u6355\u83b7\u4e07\u80fd\u5f02\u5e38\u81ea\u5b9a\u4e49\u5f02\u5e38Assert\u629b\u51fa\u5f02\u5e38 <pre><code>def testFileNotFoundError():\nfilename = '111.txt'\ntry:\nwith open(filename) as file:\ncontent = file.read()\nexcept FileNotFoundError as e:\nprint(f\"The file {filename} can't find\")\nprint(e)\n</code></pre> <pre><code>def testException():\ns1 = 'hello'\ntry:\nint(s1)\nexcept IndexError as e:\nprint(e)\nexcept KeyError as e:\nprint(e)\nexcept ValueError as e:\nprint(e)\nexcept Exception as e:\nprint(e)\n</code></pre> <pre><code>class CustomerError(Exception):\ndef __init__(self, ErrorInfo):\nsuper().__init__(self)\nself.errorInfo = ErrorInfo\ndef __str__(self):\nreturn self.errorInfo\ndef testCustomerError():\ntry:\nraise CustomerError('\u5ba2\u6237\u5f02\u5e38')\nexcept CustomerError as e:\nprint(e)\n</code></pre> <pre><code>def testAssert():\nfor i in range(3):\ntry:\nassert i &lt; 2 # \u5f53i&lt;2\u4e0d\u6210\u7acb\u65f6\uff0c\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\nexcept AssertionError:\nprint('Raise a AssertionError')\nprint(i)\nprint('end.......')\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.8.%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/","title":"\u65e5\u671f\u548c\u65f6\u95f4","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.8.%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#time","title":"time","text":"\u683c\u5f0f\u5316\u65f6\u95f4codecode <pre><code>time.strftime(\"%Y%m%d%H%M%S\", time.localtime())\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1.8.%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#timeit","title":"timeit","text":"<p>Tip</p> <p>\u7528\u6765\u6d4b\u8bd5\u4e00\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u8017\u65f6</p> \u6d4b\u8bd5\u8017\u65f6 <pre><code>def testNoDuplicates1(list):\nno_duplicate_list = []\n[no_duplicate_list.append(item) for item in list if item not in no_duplicate_list]\nreturn no_duplicate_list\n# \u4f7f\u7528 timeit \u6a21\u5757\uff0c\u67e5\u770b\u5217\u8868\u548c\u96c6\u5408\u5728\u5220\u9664\u91cd\u590d\u9879\u65f6\u7684\u6267\u884c\u65f6\u95f4\nprint(timeit('testNoDuplicates1([1, 2, 3, 1, 2, 3, 4])', globals=globals(), number=1000))\nprint(timeit('list(set([1, 2, 3, 1, 2, 3, 4]))', number=1000))\n</code></pre>"},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1/","title":"\u4e3b\u9898","text":""},{"location":"1-%E5%9F%BA%E7%A1%80%E5%A4%84%E7%90%86/1/#_2","title":"\u6807\u9898","text":"codecodecode"},{"location":"10-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/1/","title":"\u4e3b\u9898","text":""},{"location":"10-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/1/#_2","title":"\u6807\u9898","text":"codecodecode"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.1.%E5%88%97%E8%A1%A8/","title":"\u5217\u8868","text":""},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.1.%E5%88%97%E8%A1%A8/#_2","title":"\u5217\u8868\u603b\u7ed3","text":"<ul> <li>\u5217\u8868\u662f\u52a8\u6001\u7684\u6570\u7ec4\uff0c\u6709\u5e8f</li> </ul>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.1.%E5%88%97%E8%A1%A8/#_3","title":"\u5217\u8868\u67e5\u8be2","text":"\u904d\u5386\u5143\u7d20\u67e5\u627e\u7d22\u5f15\u5217\u8868\u5207\u7247 <pre><code>for index, value in enumerate([7, 4, 2, 5]):\nprint(f'\u7d22\u5f15\u662f{index}, \u5bf9\u5e94\u7684\u5143\u7d20\u662f{value}')\n</code></pre> <pre><code># \u6bd4\u5982\u60f3\u770b[1, 5, 3, 10, 20, 4, 8]\u4e2d1\u7684\u7d22\u5f15\u4f4d\u7f6e\nprint([1, 5, 3, 10, 20, 4, 8].index(1))\n# \u6bd4\u5982\u60f3\u6307\u5b9a\u4f4d\u7f6e2-5\uff0c\u770b[1, 5, 3, 10, 20, 4, 8]\u4e2d10\u7684\u7d22\u5f15\u4f4d\u7f6e\nprint([1, 5, 3, 10, 20, 4, 8].index(10, 2, 5))\n# \u6bd4\u5982\u60f3\u6307\u5b9a\u4f4d\u7f6e4-6\uff0c\u770b[1, 5, 3, 10, 20, 4, 8]\u4e2d10\u7684\u7d22\u5f15\u4f4d\u7f6e\n# (\u5f53\u6307\u5b9a\u4f4d\u7f6e\u4e0d\u5728\u8303\u56f4\u5185\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u62a5\u9519\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\uff0c\u53ef\u81ea\u5df1\u53d6\u6d88\u6ce8\u91ca)\n# print([1, 5, 3, 10, 20, 4, 8].index(10, 4, 6))\n</code></pre> <pre><code>def testListSection():\n# \u5e8f\u5217\u540d[\u8d77\u59cb\u7d22\u5f15:\u4e2d\u6b62\u7d22\u5f15:\u6b65\u957f]\nlist1 = [1, 2, 3, 4, 'a', 'b', 'c', 'd']\nprint(list1[0:2])\nprint(list1[0:4:2])\nprint(list1[3:])\nprint(list1[-3:-1])\nprint(list1[-1:])\nprint(list1[:])\n# \u5217\u8868\u53cd\u8f6c\nprint(list1[::-1])\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.1.%E5%88%97%E8%A1%A8/#_4","title":"\u5217\u8868\u63d2\u5165","text":"\u63d2\u5165\u5143\u7d20 <pre><code>list1 = [1, 2, 3]\nlist2 = [6, 7, 8]\n# \u589e\u6dfb\u5143\u7d20\nlist1.append(4)\nprint(list1)\n# extend \u5c31\u662f\u5c06\u5217\u8868\u4e2d\u5143\u7d20\u76f4\u63a5\u52a0\u5165\u5217\u8868\u4e2d\uff0c\u6700\u540e\u53ea\u6709\u4e00\u4e2a\u5217\u8868\nlist1.extend(list2)\nprint(list1)\nlist1.insert(4, 5)\nprint(list1)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.1.%E5%88%97%E8%A1%A8/#_5","title":"\u5217\u8868\u4fee\u6539","text":"\u4fee\u6539\u5143\u7d20"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.1.%E5%88%97%E8%A1%A8/#_6","title":"\u5217\u8868\u5220\u9664","text":"\u5220\u9664\u5143\u7d20 <pre><code># \u5220\u9664\u5143\u7d20\nlist1 = [1, 2, 3, 'a', 'b', 'c']\ndel list1[0]\nprint(list1)\nprint(list1.pop(0))\nprint(list1)\nlist1.remove(3)\nprint(list1)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.1.%E5%88%97%E8%A1%A8/#_7","title":"\u5217\u8868\u95f4\u64cd\u4f5c","text":"<ul> <li>\u5217\u8868\u7684\uff0c\u4ea4\u96c6\uff0c\u5dee\u96c6\uff0c\u5e76\u96c6\u7b49\u9700\u5148\u8f6c\u4e3a\u96c6\u5408set\uff0c\u518d\u7528set\u7684\u65b9\u6cd5\u64cd\u4f5c</li> </ul> \u5217\u8868\u95f4\u8ba1\u7b97zip()\u4ea4\u96c6\u5dee\u96c6(\u8865\u96c6)\u5e76\u96c6\u5bf9\u79f0\u5dee\u96c6 <pre><code>def testListCalc():\nlist1 = [1, 2, 3, 4, 'a', 'b', 'c', 'd']\nlist2 = [5, 6, 7]\na = list1 + list2\nb = list2 * 2\nprint(a)\nprint(b)\n</code></pre> <pre><code># \u60f3\u8ba9\u5217\u8868\u4e2d\u7684\u5143\u7d20\u5bf9\u5e94\u76f8\u52a0\uff0c\u53ef\u4ee5\u4f7f\u7528zip\u51fd\u6570\nresults = []\nnums1, nums2, nums3 = [1, 2, 3], [4, 5, 6], [4, 7, 6]\n# zip\u53ef\u4ee5\u6267\u884c\u591a\u4e2a\u5217\u8868\nfor f1, f2, f3 in zip(nums1, nums2, nums3):\nprint(f1, f2, f3)\nresults.append(f1 + f2 + f3)\nprint(results)\n</code></pre> <pre><code># \u6c42\u591a\u4e2alist\u7684\u4ea4\u96c6\na = [0, 1, 2, 3, 4]\nb = [0, 2, 6]\nc = [-1, 2, 5, 8]\nr = list(set(a).intersection(b, c))\nprint('\u4ea4\u96c6 --&gt;', r)\n</code></pre> <pre><code>a = [0, 1, 2, 3, 4]\nb = [0, 2, 6]\nc = [-1, 2, 5, 8]\n# \u6c42\u591a\u4e2alist\u7684\u5dee(\u8865)\u96c6 - \u5373\u83b7\u53d6\u7279\u5b9a1\u4e2alist\u4e2d\u6709\uff0c\u5176\u4ed6list\u90fd\u6ca1\u6709\u7684\u5143\u7d20\nr = list(set(a).difference(b, c))\nprint('r --&gt;', r)\n</code></pre> <pre><code>a = [0, 1, 2, 3, 4]\nb = [0, 2, 6]\nc = [-1, 2, 5, 8]\n# \u6c42\u591a\u4e2alist\u7684\u5e76\u96c6\nr = list(set(a).union(b, c))  # \u6c42\u591a\u4e2alist\u7684\u5e76\u96c6\nprint('\u5e76\u96c6 --&gt;', r)\n</code></pre> <pre><code>a = [0, 1, 2, 3, 4]\nb = [0, 2, 6]\n# \u5bf9\u79f0\u5dee\u96c6\uff08\u9879\u5728t\u6216s\u4e2d\uff0c\u4f46\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u4e8c\u8005\u4e2d\uff09\nr = list(set(a).symmetric_difference(b))\nprint('\u5bf9\u79f0\u5dee\u96c6 --&gt;', r)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.1.%E5%88%97%E8%A1%A8/#_8","title":"\u5217\u8868\u51fd\u6570","text":"\u6392\u5e8f\u5224\u65ad\u53d6\u503c\u51fd\u6570\u53bb\u91cd <pre><code>def testSorted():\n# \u5347\u5e8f\u6392\u5e8f\uff08\u9ed8\u8ba4\uff09\nprint(sorted([1, 3, 6, 2, 5, 7, 0]))\n# \u964d\u5e8f\u6392\u5e8f\uff08\u9ed8\u8ba4\uff09\nprint(sorted([1, 3, 6, 2, 5, 7, 0], reverse=True))\n</code></pre> <pre><code>def testListFunction():\nlist1 = [1, 2, 3]\nlist2 = [6, 7, 8]\na = 1\nb = 6\nprint(a in list1)\nprint(b in list1)\n</code></pre> <pre><code>def testListFunction():\nprint(len(list1))\nprint(max(list1))\nprint(min(list1))\nprint(sum(list1))\n</code></pre> <pre><code>def testNoDuplicates():\nmy_list = [1, 2, 3, 2, 3, 4]\nno_duplicate_list = list(set(my_list))\nprint(no_duplicate_list)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.2.%E5%85%83%E7%BB%84/","title":"\u5143\u7ec4","text":""},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.2.%E5%85%83%E7%BB%84/#_2","title":"\u5143\u7ec4\u603b\u7ed3","text":"<ul> <li>\u5143\u7ec4\u662f\u9759\u6001\u6001\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u4e0d\u80fd\u88ab\u4fee\u6539</li> <li><code>()</code> \u6765\u5b9a\u4e49\u5143\u7ec4</li> </ul>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.2.%E5%85%83%E7%BB%84/#_3","title":"\u5143\u7ec4\u67e5\u8be2","text":"\u5143\u7ec4\u521d\u59cb\u5316\u67e5\u627e\u7d22\u5f15\u5143\u7ec4\u5207\u7247 <pre><code>def testInitTuple():\ntuple1 = ('hi', 1, (2, 3), [6, 7])\ntuple2 = ()\ntuple3 = 1, 2, 3\nprint(tuple1)\nprint(type(tuple1))\nprint(tuple2)\nprint(type(tuple3))\nprint(tuple3)\nprint(type(tuple3))\ntuple1 = tuple(('hi', 1, (2, 3), [6, 7]))\ntuple2 = tuple()\ntuple3 = tuple((1, 2, 3))\nprint(tuple1)\nprint(type(tuple1))\n</code></pre> <pre><code>print(tuple1.index(3))\n</code></pre> <pre><code>def testTupleSection():\ntuple1 = (2, 1, 3, 5, 4)\nprint(tuple1[0])\nprint(tuple1[1:2])\nprint(tuple1[1:7])\n# \u5143\u7ec4\u89e3\u5305\na, b, c, d, e = tuple1\nprint(a, b, c, d, e)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.2.%E5%85%83%E7%BB%84/#_4","title":"\u5143\u7ec4\u63d2\u5165","text":"\u63d2\u5165\u5143\u7d20"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.2.%E5%85%83%E7%BB%84/#_5","title":"\u5143\u7ec4\u4fee\u6539","text":"\u4fee\u6539"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.2.%E5%85%83%E7%BB%84/#_6","title":"\u5143\u7ec4\u5220\u9664","text":"\u5220\u9664\u5143\u7d20"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.2.%E5%85%83%E7%BB%84/#_7","title":"\u5143\u7ec4\u95f4\u64cd\u4f5c","text":"\u5143\u7ec4\u95f4\u8ba1\u7b97 <pre><code>def testTupleFunction():\ntuple1 = (2, 1, 3, 5, 4)\ntuple2 = ('a', 'b', 'c', 'd')\ntuple3 = tuple1 + tuple2\nprint(tuple3)\ntuple4 = tuple1 * 2\nprint(tuple4)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.2.%E5%85%83%E7%BB%84/#_8","title":"\u5143\u7ec4\u51fd\u6570","text":"\u5143\u7ec4\u8f6c\u5217\u8868\u6392\u5e8f\u8f6c\u5217\u8868\u53d6\u503c\u51fd\u6570 <pre><code>def testTupleListTransfer():\ntuple1 = (2, 1, 3, 5, 4)\n# \u5143\u7ec4\u8f6c\u5217\u8868\nthis_tuple_to_list = list(tuple1)\nprint(this_tuple_to_list, type(this_tuple_to_list))\n</code></pre> <pre><code>def testTupleFunction():\ntuple1 = (2, 1, 3, 5, 4)\n# \u7528sorted\u5bf9\u5143\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u81ea\u52a8\u751f\u6210\u65b0\u5217\u8868\nlist1 = sorted(tuple1)\nprint(list1)\n</code></pre> <pre><code>def testTupleFunction():\ntuple1 = (2, 1, 3, 5, 4)\nprint(len(tuple1))\n# \u7528count\u5bf9\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\nprint(tuple1.count(1))\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.3.%E9%9B%86%E5%90%88/","title":"\u96c6\u5408","text":""},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.3.%E9%9B%86%E5%90%88/#_2","title":"\u96c6\u5408\u603b\u7ed3","text":""},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.3.%E9%9B%86%E5%90%88/#_3","title":"\u96c6\u5408\u67e5\u8be2","text":"\u96c6\u5408\u521d\u59cb\u5316 <pre><code>def testInitSet():\ns1 = set([1, 2, 3])\ns2 = {1, 2, 3}\nprint(s1, s2)\nprint(type(s1), type(s2))\n# \u7a7a\u96c6\u5408\ns = set()\nprint(type(s))\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.3.%E9%9B%86%E5%90%88/#_4","title":"\u96c6\u5408\u63d2\u5165","text":"\u63d2\u5165\u5143\u7d20 <pre><code>def testAdd():\ns = {1, 2, 3}\ns.add(4)\nprint(s)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.3.%E9%9B%86%E5%90%88/#_5","title":"\u96c6\u5408\u4fee\u6539","text":"\u4fee\u6539\u5143\u7d20 <pre><code>def testUpdate():\ns = {1, 2, 3}\ns.update([2, 3, 4, 5, 6])\nprint(s)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.3.%E9%9B%86%E5%90%88/#_6","title":"\u96c6\u5408\u5220\u9664","text":"\u5220\u9664\u5143\u7d20\u79fb\u9664\u5143\u7d20pop\u79fb\u9664\u5143\u7d20\u6e05\u7a7a\u96c6\u5408 <pre><code>def testRemove():\ns = {1, 2, 3}\ns.remove(3)\ns.remove(3)\nprint(s)\n</code></pre> <pre><code># \u5c1d\u8bd5\u5220\u9664\u4e0d\u5728\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u65f6\u4e0d\u4f1a\u6536\u5230\u8b66\u62a5\ndef testDiscard():\ns = {1, 2, 3}\ns.discard(3)\ns.discard(3)\nprint(s)\n</code></pre> <pre><code># pop()\u968f\u673a\u4e22\u5f03\u4e00\u4e2a\u5143\u7d20\ndef testPop():\ns = {1, 2, 3, 4, 5}\nprint(s.pop())  # \u5220\u9664\u4e00\u4e2a\u4efb\u610f\u7684\u5143\u7d20\nprint(s)\n</code></pre> <pre><code>def testClear():\ns = {1, 2, 3, 4, 5}\ns.clear()\nprint(s)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.3.%E9%9B%86%E5%90%88/#_7","title":"\u96c6\u5408\u95f4\u64cd\u4f5c","text":"\u4ea4\u96c6\u5e76\u96c6\u5dee\u96c6(\u8865\u96c6)\u5bf9\u79f0\u5dee\u96c6 <pre><code># intersection() \u6216\u8005 &amp; \u8fd4\u56de\u4e00\u4e2a\u7531\u96c6\u5408\u5171\u540c\u5143\u7d20\u7ec4\u6210\u7684\u96c6\u5408\n# Author: Noodles\n# Date: 2023/6/27 10:27\ndef testIntersection():\ns1 = {1, 2, 3}\ns2 = {2, 3, 4}\ns3 = {3, 4, 5}\nprint(s1.intersection(s2, s3))\nprint(s1 &amp; s2 &amp; s3)\n</code></pre> <pre><code># union() \u6216\u8005 | \u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5305\u542b\u63d0\u4f9b\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\n# Author: Noodles\n# Date: 2023/6/27 10:27\ndef testUnion():\ns1 = {1, 2, 3}\ns2 = {3, 4, 5}\nprint(s1.union(s2))\nprint(s1 | s2)\n</code></pre> <pre><code># diference() \u6216\u8005 - \u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u503c\u5728 \u201cs1\u201d \u4e2d\u4f46\u4e0d\u5728 \u201cs2\u201d \u4e2d\n# Author: Noodles\n# Date: 2023/6/27 10:27\ndef testDiference():\ns1 = {1, 2, 3}\ns2 = {3, 4, 5}\nprint(s1.difference(s2))\nprint(s1 - s2)\n</code></pre> <pre><code># symetric_difference() \u6216\u8005 ^ \u5c06\u8fd4\u56de\u96c6\u5408\u4e4b\u95f4\u7684\u4e0d\u540c\u5143\u7d20\n# Author: Noodles\n# Date: 2023/6/27 10:27\ndef testSymmetricDifference():\ns1 = {1, 2, 3}\ns2 = {2, 3, 4}\nprint(s1.symmetric_difference(s2))\nprint(s1 ^ s2)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.3.%E9%9B%86%E5%90%88/#_8","title":"\u96c6\u5408\u51fd\u6570","text":""},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.4.%E5%AD%97%E5%85%B8/","title":"\u5b57\u5178","text":""},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.4.%E5%AD%97%E5%85%B8/#_2","title":"\u5b57\u5178\u603b\u7ed3","text":"code"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.4.%E5%AD%97%E5%85%B8/#_3","title":"\u5b57\u5178\u67e5\u8be2","text":"\u521d\u59cb\u5316\u53d6\u503c\u904d\u5386 <pre><code>this_dict1 = {'dict1': 1, 'dict2': 2, 'dict3': 3}\nthis_dict2 = {'dict1': [1, 2, 3], 'dict2': [3, 4, 5], 'dict3': [4, 5, 6]}\nthis_dict3 = dict()\nprint('\u5b57\u51781: ', this_dict1, '\u7c7b\u578b: ', type(this_dict1))\nprint('\u5b57\u51782: ', this_dict2, '\u7c7b\u578b: ', type(this_dict2))\nprint('\u5b57\u51783: ', this_dict3, '\u7c7b\u578b: ', type(this_dict3))\n</code></pre> <pre><code>def testGetDict():\n# \u7531\u4e8e\u5b57\u5178\u8868\u662f\u7531\u952ekey\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u503cvalue \u7ec4\u6210{key: value}\uff0c\u56e0\u6b64\u9700\u8981\u5b57\u5178\u7684\u952e\u503c\u5bf9\u7075\u6d3b\u5e94\u7528\n# \u6839\u636e\u952e\uff0c\u53d6\u51fa\u5bf9\u5e94\u7684\u503c\uff0c\u5199\u6cd51\ndict1_values = this_dict2['dict1']\nprint('\u5199\u6cd51 dict1_values: ', dict1_values)\n# \u6839\u636e\u952e\uff0c\u53d6\u51fa\u5bf9\u5e94\u7684\u503c\uff0c\u5199\u6cd52\ndict1_values = this_dict2.get('dict1')\nprint('\u5199\u6cd52 dict1_values: ', dict1_values)\n# \u53d6\u51fa\u6240\u6709\u7684\u952e\ndicts_keys = this_dict2.keys()\nprint('dicts_keys: ', dicts_keys)\n# \u53d6\u51fa\u6240\u6709\u7684\u503c\ndicts_values = this_dict2.values()\nprint('dicts_values: ', dicts_values)\n</code></pre> <pre><code>def testDictFor():\nfor key in this_dict1.keys():\nprint(key)\nfor key in this_dict1:\nprint(key)\nfor val in this_dict1.values():\nprint(val)\n# \u6bd4\u5982\u8981\u53d6[1,2,3]\u8fd9\u4e2a\u503c\u7684\u952e\uff0c\u5199\u6cd52\n# \u5728\u5199\u8fd9\u4e2a\u65b9\u6cd5\u4e4b\u524d\uff0c\u5148\u770b\u4e00\u4e0b\u5b57\u5178\u8fed\u4ee3\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0citems()\n# \u904d\u5386\u5b57\u5178\u7684\u952e\u503c\u5bf9\nfor key, value in this_dict2.items():\nprint(key, value)\n# \u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u5bb9\u6613\u53d6\u51fa[1,2,3]\u5bf9\u5e94\u7684\u952e\u4e86\nfor key, value in this_dict2.items():\nif value == [1, 2, 3]:\nprint(key)\nprint([key for key, value in this_dict2.items() if value == [1, 2, 3]])\n# \u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\u8fd9\u79cd\u5217\u8868\u91cc\u5d4c\u5957\u8fed\u4ee3\u7684\u5199\u6cd5\n# \u53ea\u6709if\u7684\u65f6\u5019\uff0c\u5d4c\u5957\u5199\u6cd5\nprint([f for f in range(10) if f % 2 == 0])\n# \u6709if else\u7684\u65f6\u5019\uff0c\u5d4c\u5957\u5199\u6cd5\n# \u6bd4\u5982\u5728\u6307\u5b9a1\uff0c2\uff0c3\u8303\u56f4\u5185\u7684\u65f6\u5019\uff0c\u8f93\u51fa\u539f\u6765\u7684\u6570\u7684\u5e73\u65b9\uff1b\u5426\u5219\u7edf\u4e00\u8f93\u51fa0\nprint([f ** 2 if f in [1, 2, 3] else 0 for f in range(10)])\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.4.%E5%AD%97%E5%85%B8/#_4","title":"\u5b57\u5178\u63d2\u5165","text":"code"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.4.%E5%AD%97%E5%85%B8/#_5","title":"\u5b57\u5178\u4fee\u6539","text":"\u4fee\u6539\u5b57\u5178\u4e2d\u7684\u503c <pre><code># \u66f4\u65b0\u5b57\u5178\u4e2d\u7684\u503c\n# Author: Noodles\n# Date: 2023/5/12 10:49\ndef testDictSetValue():\ndict = {'Name': 'Eric', 'Age': 7, 'Class': 'First'}\ndict['Age'] = 8\ndict['School'] = 'JSDX'\nprint(dict)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.4.%E5%AD%97%E5%85%B8/#_6","title":"\u5b57\u5178\u5220\u9664","text":"\u5220\u9664\u5143\u7d20\u6e05\u7a7a\u5b57\u5178\u5220\u9664\u5b57\u5178 <pre><code>def testDictDel():\ndict = {'Name': 'Eric', 'Age': 7, 'Class': 'First'}\ndel dict['Name']\nprint(dict)\n</code></pre> <pre><code>def testDictDel():\ndict = {'Name': 'Eric', 'Age': 7, 'Class': 'First'}\ndict.clear()\nprint(dict)\n</code></pre> <pre><code>def testDictDel():\ndict = {'Name': 'Eric', 'Age': 7, 'Class': 'First'}\ndel dict\nprint(dict)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.4.%E5%AD%97%E5%85%B8/#_7","title":"\u5b57\u5178\u64cd\u4f5c","text":"\u522b\u540d\u548c\u590d\u5236 <pre><code>def testDictAliasAndCopy():\ndict = {'Name': 'Eric', 'Age': 7, 'Class': 'First'}\n# \u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5982\u679c\u4fee\u6539alias\uff0cdict\u4e5f\u4f1a\u6539\u53d8\nalias = dict\n# \u6d45\u62f7\u8d1d\ncopy = dict.copy()\nprint(alias)\nprint(copy)\n</code></pre>"},{"location":"2-%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/2.4.%E5%AD%97%E5%85%B8/#_8","title":"\u5b57\u5178\u51fd\u6570","text":"\u6392\u5e8f <pre><code>def testDictSorted():\ndict1 = {'dict1': 1, 'dict2': 2, 'dict3': 3}\n# \u5982\u679c\u8981\u5bf9\u5b57\u5178\u4e2d\u7684value\u6392\u5e8f\u5462\uff0c\u5c31\u9700\u8981\u7528\u5230key\u53c2\u6570\uff0c\u4e0a\u9762\u90fd\u662f\u5bf9\u5143\u7d20\u76f4\u63a5\u6392\u5e8f\n'''\n    sorted(iterable, key=None, reverse=False)\n    iterable\uff1a\u8981\u6c42\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5b57\u5178\u53ef\u4ee5\u8fd9\u4e48\u6392\u5e8f\n    '''\nprint(sorted(dict1.items(), reverse=True, key=lambda x: x[1]))\n# \u4e0d\u7528 items() \u65b9\u6cd5\u7684\u8bdd\u5c31\u4f1a\u8f93\u51fa\u8fd9\u6837\u7684\u7ed3\u679c\nprint(sorted(dict1, reverse=True, key=lambda x: x[1]))\n# \u5982\u679c\u8981\u5bf9\u5b57\u5178\u4e2d\u7684key\u6392\u5e8f\u5462\uff0c\u5c31\u53ef\u4ee5\u53d6key\u4e3ax[0]\nprint(sorted(dict1.items(), reverse=True, key=lambda x: x[0]))\nprint(dict1.get('ddd'))\n</code></pre>"},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.1.%E7%B1%BB/","title":"\u7c7b","text":""},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.1.%E7%B1%BB/#_2","title":"\u7c7b\u7684\u603b\u7ed3","text":"<ul> <li>\u5177\u6709\u76f8\u540c\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u7528\u7c7b\u6765\u5c01\u88c5\uff0c\u66f4\u5bb9\u6613\u7ba1\u7406</li> </ul>"},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.1.%E7%B1%BB/#_3","title":"\u5b9a\u4e49\u7c7b","text":"\u7c7b\u7684\u793a\u4f8b\u521d\u59cb\u5316\u58f0\u660e\u65b9\u6cd5\u9759\u6001\u65b9\u6cd5 <pre><code>class Person:\n# self\u662f\u5fc5\u987b\u8981\u5e26\u7684\uff0c\u6709@classmthod\u6307\u660e\u9664\u5916\ndef get_name(self, name):\nname_text = f'My name is {name}'\nreturn name_text\ndef get_age(self, age):\nage_text = f'My age is {age}'\nreturn age_text\n</code></pre> <pre><code>class Person:\ndef __init__(self, name, age):\n# self.\u53d8\u91cf\uff0c \u90a3\u4e48\u8fd9\u4e2a\u53d8\u91cf\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u7c7b\u4e0b\u4efb\u4f55\u4e00\u4e2a\u51fd\u6570\u4e2d\u4f7f\u7528\nself.name = name\nself.age = age\ndef get_his_firends(self, friends):\ninformation = f'his name is {self.name}, age is {self.age}, his firends is {friends}.'\nreturn information\n</code></pre> <pre><code>class Person:\n@staticmethod\ndef get_name(name):\nname_text = f'My name is {name}'\nreturn name_text\n@staticmethod\ndef get_age(age):\nage_text = f'My age is {age}'\nreturn age_text\n</code></pre>"},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.1.%E7%B1%BB/#_4","title":"\u62bd\u8c61\u7c7b","text":"<ul> <li>\u62bd\u8c61\u7c7b\uff1a\u7279\u6b8a\u7684\u7c7b\uff0c\u53ea\u80fd\u88ab\u7ee7\u627f\uff0c\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002</li> <li>\u4ece\u4e00\u5806\u7c7b\u4e2d\u62bd\u53d6\u76f8\u540c\u7684\u5185\u5bb9\u6765\u5b9a\u4e49\uff0c\u5305\u62ec\u6570\u636e\u5c5e\u6027\u548c\u51fd\u6570\u5c5e\u6027\u3002</li> <li>\u62bd\u8c61\u7c7b\u4e2d\u53ea\u80fd\u6709\u62bd\u8c61\u65b9\u6cd5\uff08\u6ca1\u6709\u5b9e\u73b0\u529f\u80fd\uff09\uff0c\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\uff0c\u53ea\u80fd\u88ab\u7ee7\u627f\uff0c\u4e14\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5\u3002</li> </ul> \u62bd\u8c61\u7c7b\u5b9a\u4e49\u7ee7\u627f\u62bd\u8c61\u7c7b\u6d4b\u8bd5 <pre><code>from abc import ABC, abstractmethod\nclass Polygon(ABC):\n@abstractmethod\ndef noofsides(self):\npass\n</code></pre> <pre><code>class Triangle(Polygon):\n# overriding abstract method\ndef noofsides(self):\nprint(\"I have 3 sides\")\nclass Pentagon(Polygon):\n# overriding abstract method\ndef noofsides(self):\nprint(\"I have 5 sides\")\nclass Hexagon(Polygon):\n# overriding abstract method\ndef noofsides(self):\nprint(\"I have 6 sides\")\nclass Quadrilateral(Polygon):\n# overriding abstract method\ndef noofsides(self):\nprint(\"I have 4 sides\")\n</code></pre> <pre><code>if __name__ == '__main__':\nR = Triangle()\nR.noofsides()\nK = Quadrilateral()\nK.noofsides()\nR = Pentagon()\nR.noofsides()\nK = Hexagon()\nK.noofsides()\n</code></pre>"},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.2.%E7%BB%A7%E6%89%BF/","title":"\u7ee7\u627f","text":""},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.2.%E7%BB%A7%E6%89%BF/#_2","title":"\u5355\u7ee7\u627f","text":"\u7236\u7c7b\u793a\u4f8b\u7ee7\u627f\u7c7bmain <pre><code>class people:\n# \u5b9a\u4e49\u57fa\u672c\u5c5e\u6027\nname = ''\nsex = 0\n# \u5b9a\u4e49\u79c1\u6709\u5c5e\u6027\uff0c\u79c1\u6709\u5c5e\u6027\u5728\u7c7b\u5916\u90e8\u65e0\u6cd5\u76f4\u63a5\u8fdb\u884c\u8bbf\u95ee\n__height = 0\n# \u5b9a\u4e49\u6784\u9020\u65b9\u6cd5\ndef __init__(self, n, a, w):\nself.name = n\nself.sex = a\nself.__height = w\ndef speak(self):\nprint(f'{self.name}\u8bf4\uff1a\u6211\u7684\u6027\u522b\u662f{self.sex}')\n</code></pre> <pre><code># \u5355\u7ee7\u627f\u5b9e\u4f8b\uff0c\u5728\u62ec\u53f7\u4e2d\u5199\u7236\u7c7b\u540d\nclass son(people):\ngrade = ''\ndef __init__(self, n , a, w, g):\n# people.__init__(self, n, a, w)\nsuper(son, self).__init__(n, a, w)\nself.grade = g\n# \u8986\u5199\u7236\u7c7b\u7684\u65b9\u6cd5\ndef speak(self):\nprint(f'{self.name}\u8bf4\uff1a\u6211\u7684\u6027\u522b\u662f{self.sex}\uff0c\u6211\u5728\u8bfb{self.grade}\u5e74\u7ea7')\n</code></pre> <pre><code>if __name__ == '__main__':\ns = son('\u53ee\u5f53', '\u7537', 12, 6)\ns.speak()\n</code></pre>"},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.2.%E7%BB%A7%E6%89%BF/#_3","title":"\u591a\u7ee7\u627f","text":"\u7ee7\u627f\u591a\u7236\u7c7b\u591a\u7ea7\u7ee7\u627fcode3 <pre><code>class Base1:\npass\nclass Base2():\npass\n# \u7ee7\u627fBase1\u548cBase2\nclass MultiDerived(Base1, Base2):\npass\n</code></pre> <pre><code>class Base:\npass\nclass Derived1(Base):\npass\n# \u591a\u7ea7\u7ee7\u627f\nclass Derived2(Derived1):\npass\n</code></pre> <pre><code>\n</code></pre>"},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.3.%E7%B1%BB%E7%9A%84%E7%BB%84%E5%90%88/","title":"\u7c7b\u7684\u7ec4\u5408","text":"<ul> <li> <p>\u7ec4\u5408\uff1a\u5f53\u7c7b\u4e4b\u95f4\u6709\u663e\u8457\u7684\u4e0d\u540c\uff0c\u5e76\u4e14\u8f83\u5c0f\u7684\u7c7b\u662f\u7ec4\u6210\u8f83\u5927\u7c7b\u6240\u9700\u8981\u7684\u7ec4\u4ef6\u65f6\uff0c\u7528\u7c7b\u7684\u7ec4\u5408\u4ea4\u5408\u7406</p> </li> <li> <p>\u4f8b\u5982\u533b\u9662\u662f\u7531\u591a\u4e2a\u79d1\u5ba4\u7ec4\u6210\u7684\uff0c\u6b64\u65f6\u53ef\u4ee5\u5b9a\u4e49\u4e0d\u540c\u79d1\u5ba4\u7684\u7c7b\uff0c\u533b\u9662\u7684\u7c7b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5404\u4e2a\u4e0d\u540c\u79d1\u5ba4\u7684\u7c7b\u8fdb\u884c\u7ec4\u5408\uff0c\u7ec4\u5408\u5c31\u662f\u8bf4\u4e00\u4e2a\u7c7b\u4e2d\u628a\u53e6\u4e00\u4e2a\u7c7b\u5f53\u6210\u5c5e\u6027\u53bb\u4f7f\u7528</p> </li> </ul>"},{"location":"3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/3.3.%E7%B1%BB%E7%9A%84%E7%BB%84%E5%90%88/#_2","title":"\u7ec4\u5408","text":"\u793a\u4f8bmain <pre><code># \u5b9a\u4e49 \u2018\u5200\u2019 \u7c7b\nclass knife:\ndef prick(self, obj):\nobj -= 500\nprint(obj)\nclass Person:\nrole = 'person'\ndef __init__(self, name):\nself.name = name\nself.knife = knife()        # \u7ed9\u4eba\u4e00\u628a\u5200\n</code></pre> <pre><code>if __name__ == '__main__':\negon = Person('egon')\nobj = 1000\negon.knife.prick(obj)\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.1.%E5%A4%9A%E8%BF%9B%E7%A8%8B/","title":"\u591a\u8fdb\u7a0b","text":"<ul> <li>\u8fdb\u7a0b\u5904\u7406\uff1amultiprocess\u6a21\u5757</li> <li>python\u4e2d\u591a\u7ebf\u7a0b\u65e0\u6cd5\u5229\u7528\u591a\u6838\u4f18\u52bf\uff0c\u60f3\u8981\u5145\u5206\u7684\u5229\u7528\u591a\u6838CPU\u8d44\u6e90\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528\u591a\u8fdb\u7a0b</li> </ul>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.1.%E5%A4%9A%E8%BF%9B%E7%A8%8B/#_2","title":"\u8fdb\u7a0b\u521b\u5efa","text":"\u521b\u5efa\u5b50\u8fdb\u7a0bjoin\u81ea\u5b9a\u4e49\u8fdb\u7a0b\u7ee7\u627f\u7c7b <pre><code>import os\nimport time\nfrom multiprocessing import Process\ndef f(name):\nprint('hello,', name)\nprint('hai \u6211\u662f\u5b50\u8fdb\u7a0b')\ndef printPid(x):\nprint(f'\u5b50\u8fdb\u7a0bid:{os.getpid()}\uff0c \u7236\u8fdb\u7a0bid\uff1a{os.getppid()}')\nreturn x * x\ndef testProcess():\np = Process(target=f, args=('start',))\np.start()\ntime.sleep(1)\nprint('\u7236\u8fdb\u7a0b\u88ab\u6267\u884c')\nprint(f'\u4e3b\u8fdb\u7a0bid\uff1a{os.getpid()}')\nfor i in range(5):\np = Process(target=printPid, args=(i,))\np.start()\n</code></pre> <pre><code>def testProcessJoin():\np = Process(target=f, args=('join',))\np.start()\n# \u7b49\u5f85p\u8fdb\u7a0b\u505c\u6b62\u624d\u6267\u884c\u4e0b\u4e00\u884c\u4ee3\u7801\np.join()\nprint('\u6211\u662f\u7236\u8fdb\u7a0b')\n</code></pre> <pre><code># \u6839\u636e\u9700\u6c42\u81ea\u5b9a\u4e49\u7c7b\u7ee7\u627fProcess\uff0c\u901a\u8fc7\u7ee7\u627f\u7684\u65b9\u5f0f\u5f00\u542f\u8fdb\u7a0b\nclass Download(Process):\n# \u8fd9\u91cc\u91cd\u8f7d\u7236\u7c7b __init__\u65b9\u6cd5\u7684\u539f\u56e0\u662f\u5bf9\u8c61\u8981\u4f20\u4e2a\u53c2\u6570\uff0c\u4e0e\u4e0b\u9762run\u65b9\u6cd5\u7684\u6267\u884c\u6ca1\u6709\u5173\u7cfb\ndef __init__(self, interval):\nProcess.__init__(self)\nself.interval = interval\n# \u91cd\u5199Process\u7c7b\u4e2d\u7684run\u65b9\u6cd5\ndef run(self):\n# \u5f00\u542f\u8fd9\u4e2a\u8fdb\u7a0b\u6240\u8981\u6267\u884c\u7684\u4ee3\u7801\nt_start = time.time()\nprint(f'\u5f00\u542f\u8fdb\u7a0b\uff1a{os.getpid()}\u8fdb\u884c\u4e0b\u8f7d\u64cd\u4f5c')\nprint(f'\u5b50\u8fdb\u7a0b\uff1a{os.getpid()}, \u7236\u8fdb\u7a0b\u4e3a({os.getppid()})')\ntime.sleep(self.interval)\nt_stop = time.time()\nprint(f'\u5b50\u8fdb\u7a0b{os.getpid()}\u6267\u884c\u7ed3\u675f\uff0c \u8017\u65f6{t_stop - t_start}\u79d2')\ndef testDownload():\nt_start = time.time()\nprint(f'\u5f53\u524d\u8fdb\u7a0b{os.getpid()}')\np = Download(5)\np.start()\np.join(10)\n# time.sleep(10)\nt_stop = time.time()\nprint(f'\u4e3b\u8fdb\u7a0b{os.getpid()}\u6267\u884c\u7ed3\u675f\uff0c \u8017\u65f6{t_start - t_stop}\u79d2')\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.1.%E5%A4%9A%E8%BF%9B%E7%A8%8B/#_3","title":"\u8fdb\u7a0b\u540c\u6b65\uff1a\u4e8b\u4ef6","text":"<ul> <li>Python\u8fdb\u7a0b\u7684\u4e8b\u4ef6\u4e3b\u8981\u7528\u4e8e\u4e3b\u8fdb\u7a0b\u7a0b\u63a7\u5236\u5176\u4ed6\u8fdb\u7a0b\u7a0b\u7684\u6267\u884c</li> </ul> \u793a\u4f8b <pre><code>import random\nimport time\nfrom multiprocessing import Process, Event\ndef car(event, n):\nwhile True:\nif not event.is_set():  # \u8fdb\u7a0b\u521a\u5f00\u542f\uff0cis_set()\u7684\u503c\u662fFalse\uff0c\u6a21\u62df\u4fe1\u53f7\u706f\u4e3a\u7ea2\u8272\nprint(f'\\033[31m\u7ea2\u706f\u4eae\\033[0m, car{n}\u7b49\u7740')\nevent.wait()  # \u963b\u585e\uff0c\u7b49\u5f85is_set()\u7684\u503c\u53d8\u6210True\uff0c \u6a21\u62df\u4fe1\u53f7\u706f\u4e3a\u7eff\u8272\nprint(f'\\033[32m \u8f66{n} \u7eff\u706f\u4eae\u4e86\\033[0m')\ntime.sleep(random.randint(3, 6))\nif not event.is_set():  # \u5982\u679cis_set()\u7684\u503c\u662fFalse\uff0c\u4e5f\u5c31\u662f\u7ea2\u706f\uff0c\u4ecd\u7136\u56de\u5230while\u8bed\u53e5\u5f00\u59cb\ncontinue\nprint('\u98d8\u8fc7~~,car', n)\nbreak\ndef police_car(event, n):\nwhile True:\nif not event.is_set():\nprint(f'\\033[31m\u7ea2\u706f\u4eae\\033[0m, \u8b66\u8f66{n}\u7b49\u7740')\n# \u963b\u585e\uff0c \u7b49\u5f85\u8bbe\u7f6e\u7b49\u5f85\u65f6\u95f4\uff0c\u7b49\u5f850.1\u79d2\u540e\u6ca1\u6709\u7b49\u5230\u7eff\u706f\u5c31\u95ef\u7ea2\u706f\u8d70\u4e86\nevent.wait(0.1)\nif not event.is_set():\nprint(f'\\033[33m \u7ea2\u706f\uff0c\u8b66\u8f66\u98de\u8fc7 \\033[0m, car {n}')\nelse:\nprint(f'\\033[33;46m \u7eff\u706f\uff0c\u8b66\u8f66\u6b63\u5e38\u901a\u8fc7 \\033[0m, car {n}')\nbreak\ndef traffic_lights(event, inverval):\nwhile True:\ntime.sleep(inverval)\nif event.is_set():\nprint('\\033[31m\u7ea2\u706f\u4eae\\033[0m', event.is_set())\nevent.clear()  # \u5c06is_set()\u7684\u503c\u8bbe\u7f6e\u4e3aFalse\nelse:\nevent.set()  # \u5c06is_set()\u7684\u503c\u8bbe\u7f6e\u4e3aTrue\nprint('\\033[33;46m \u7eff\u706f\u4eae \\033[0m', event.is_set())\nif __name__ == '__main__':\nevent = Event()\n# \u521b\u5efa10\u4e2a\u8fdb\u7a0b\u63a7\u523610\u8f86\u8f66\nfor i in range(10):\np = Process(target=car, args=(event, i,))\np.start()\n# \u521b\u5efa5\u4e2a\u8fdb\u7a0b\u63a7\u52365\u8f86\u8b66\u8f66\nfor i in range(5):\np = Process(target=police_car, args=(event, i))\np.start()\n# \u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u63a7\u5236\u7ea2\u7eff\u706f\nt = Process(target=traffic_lights, args=(event, 10))\nt.start()\nprint('-------------&gt;')\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.1.%E5%A4%9A%E8%BF%9B%E7%A8%8B/#_4","title":"\u8fdb\u7a0b\u540c\u6b65\uff1a\u9501","text":"\u793a\u4f8b <pre><code># \u8fdb\u7a0b\u5904\u7406\uff1a\u540c\u6b65\u673a\u5236\uff0c\u9501\nimport os\nimport random\nimport time\nfrom multiprocessing import Process, Lock\ndef work(n):\nprint(f'{n}:{os.getpid()} is running')\ntime.sleep(random.random())\nprint(f'{n}:{os.getpid()} is done')\ndef workLock(lock, n):\nlock.acquire()\nprint(f'{n}:{os.getpid()} is running')\ntime.sleep(random.random())\nprint(f'{n}:{os.getpid()} is done')\nlock.release()\nif __name__ == '__main__':\n# \u7528\u9501\u8fdb\u884c\u540c\u6b65\nlock = Lock()\nfor i in range(3):\np = Process(target = workLock, args=(lock, i))\np.start()\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.1.%E5%A4%9A%E8%BF%9B%E7%A8%8B/#_5","title":"\u8fdb\u7a0b\u540c\u6b65\uff1a\u4fe1\u53f7\u91cf","text":"<ul> <li>\u9501\u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\u6570\u636e\uff0c\u800c\u4fe1\u53f7\u91cfSemaphore\u662f\u540c\u65f6\u5141\u8bb8\u4e00\u5b9a\u6570\u91cf\u7684\u7ebf\u7a0b\u66f4\u6539\u6570\u636e</li> <li>\u4fe1\u53f7\u91cf\u540c\u6b65\u57fa\u4e8e\u5185\u90e8\u8ba1\u6570\u5668\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21acquire(),\u8ba1\u6570\u5668\u51cf 1\uff1b\u6bcf\u8c03\u7528\u4e00\u6b21 release()\uff0c\u8ba1\u6570\u5668\u52a0 1\uff0c\u5f53\u8ba1\u6570\u5668\u4e3a 0 \u65f6\uff0cacquire()\u8c03\u7528\u88ab\u963b\u585e</li> <li>\u4fe1\u53f7\u91cf\u540c\u6b65\u673a\u5236\u9002\u7528\u4e8e\u8bbf\u95ee\u50cf\u670d\u52a1\u5668\u8fd9\u6837\u7684\u6709\u9650\u8d44\u6e90</li> </ul> \u793a\u4f8b <pre><code>import os\nimport random\nimport time\nfrom multiprocessing import Process, Semaphore\ndef go_ktv(semaphore, user):\nsemaphore.acquire()\nprint(f'{user} \u5360\u5751')\n# \u6a21\u62df\u6bcf\u4e2a\u4eba\u5728ktv\u4e2d\u5f85\u7684\u65f6\u95f4\u4e0d\u540c\ntime.sleep(random.randint(3, 6))\nprint(f'{user} \u79bb\u5f00')\nsemaphore.release()\nif __name__ == '__main__':\nsemaphore = Semaphore(4)\np_list = []\nfor i in range(13):\np = Process(target=go_ktv, args=(semaphore, f'user{i}',))\np.start()\np_list.append(p)\nfor p in p_list:\np.join()\nprint('-------------------&gt;')\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/","title":"\u591a\u7ebf\u7a0b","text":""},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_2","title":"\u7ebf\u7a0b\u521b\u5efa","text":"\u7ebf\u7a0b\u5b9e\u4f8b <pre><code>def fund():\nfor i in range(5):\nprint('func')\ntime.sleep(1)\nif i == 3:\nthread.exit()\n# \u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\ndef testStart():\n# \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u7684\u53c2\u6570\nthread.start_new_thread(fund, ())\nthread.start_new(fund, ())\n# \u7ebf\u7a0b\u9501\ndef testLock():\nlock = thread.allocate_lock()\nprint(lock.locked())\ncount = 0\nif lock.acquire():\ncount += 1\nlock.release()\ntime.sleep(6)\nif __name__ == '__main__':\n# testStart()\ntestLock()\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#threading","title":"threading\u6a21\u5757","text":"<p>threading\u6a21\u5757\u57fa\u4e8ejava\u7ebf\u7a0b\u6a21\u578b\u8bbe\u8ba1</p> MyThreadjoin() <pre><code>def func():\nprint('func() passed to Thread')\n# \u7ee7\u627fThread\u7c7b\uff0c\u91cd\u5199run\n# Author: Noodles\n# Date: 2023/5/26 8:16\nclass MyThread(threading.Thread):\ndef run(self) -&gt; None:\nprint('MyThread extended from Thread')\ndef testThread():\nt = threading.Thread(target=func)\nt.start()\nt = MyThread()\nt.start()\n</code></pre> <pre><code>def context(tJoin):\nprint('in threadContext')\ntJoin.start()\n# \u5c06\u963b\u585etContext\u76f4\u5230threadJoin\u7ec8\u6b62\ntJoin.join()\n#tJoin\u7ec8\u6b62\u540e\u7ee7\u7eed\u6267\u884c\nprint('out threadContext')\ndef join():\nprint('in threadJoin')\ntime.sleep(1)\nprint('out threadJoin')\ndef testJoin():\ntJoin = threading.Thread(target=join)\ntContext = threading.Thread(target=context, args=(tJoin, ))\ntContext.start()\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_3","title":"\u6761\u4ef6\u53d8\u91cf","text":"<p>Condition(\u6761\u4ef6\u53d8\u91cf)\u901a\u5e38\u4e0e\u4e00\u4e2a\u9501\u5173\u8054\uff0c\u9700\u8981\u591a\u4e2aCondition\u4e2d\u5171\u4eab\u4e00\u4e2a\u9501\u65f6\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2aLock/RLock\u5b9e\u4f8b\u7ed9\u6784\u9020\u65b9\u6cd5\uff0c\u5426\u5219\u5c06\u81ea\u5df1\u751f\u6210\u4e00\u4e2aRLock</p> Condition <pre><code>import threading\nimport time\nproduct = None  # \u6a21\u62df\u5546\u54c1\ncon = threading.Condition()  # \u6761\u4ef6\u53d8\u91cf\n# \u751f\u4ea7\u65b9\u6cd5\ndef produce():\nglobal product\nif con.acquire():\nwhile True:\nif product is None:\nprint('produce....')\nproduct = 'anything'\ncon.notify()  # \u901a\u77e5\u6d88\u8d39\u8005\uff0c\u5546\u54c1\u5df2\u7ecf\u751f\u4ea7\ncon.wait()  # \u7b49\u5f85\u901a\u77e5\ntime.sleep(2)\ndef consume():\nglobal product\nif con.acquire():\nwhile True:\nif product is not None:\nprint('consume...')\nproduct = None\ncon.notify()\ncon.wait()\ntime.sleep(2)\nif __name__ == '__main__':\nt1 = threading.Thread(target=produce)\nt2 = threading.Thread(target=consume)\nt2.start()\nt1.start()\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#event","title":"Event","text":"<p>Event(\u4e8b\u4ef6),\u7ebf\u7a0b\u901a\u77e5\u4e8b\u4ef6</p> Event <pre><code>import threading\nimport time\nevent = threading.Event()\ndef func():\nprint(f'{threading.current_thread().name} wait for event...')\nevent.wait()\nprint(f'{threading.current_thread().name} recv event...')\nif __name__ == '__main__':\nt1 = threading.Thread(target=func)\nt2 = threading.Thread(target=func)\nt1.start()\nt2.start()\ntime.sleep(2)\nprint('MainThread set event.')\nevent.set()\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#thread-local","title":"thread-local","text":"<p>local\uff0c\u7528\u4e8e\u7ba1\u7406thread-local(\u7ebf\u7a0b\u5c40\u90e8\u7684)\u6570\u636e.\u5bf9\u4e8e\u540c\u4e00\u4e2alocal\uff0c\u7ebf\u7a0b\u65e0\u6cd5\u8bbf\u95ee\u5176\u4ed6\u7ebf\u7a0b\u8bbe\u7f6e\u7684\u5c5e\u6027\uff1b\u7ebf\u7a0b\u8bbe\u7f6e\u7684\u5c5e\u6027\u4e0d\u4f1a\u88ab\u5176\u4ed6\u7ebf\u7a0b\u8bbe\u7f6e\u7684\u540c\u540d\u5c5e\u6027\u66ff\u6362\uff0c\u53ef\u4ee5\u628alocal\u770b\u6210\u662f\u4e00\u4e2a\u201c\u7ebf\u7a0b-\u5c5e\u6027\u5b57\u5178\u201d\u7684\u5b57\u5178\uff0c\u5c01\u88c5\u4e86\u4ece\u81ea\u8eab\u4f7f\u7528\u7ebf\u7a0b\u4f5c\u4e3akey\u68c0\u7d22\u5bf9\u5e94\u7684\u5c5e\u6027\u5b57\u5178\uff0c\u518d\u4f7f\u7528\u5c5e\u6027\u540d\u4f5c\u4e3akey</p> thread-local <pre><code>import threading\nlocal = threading.local()\nlocal.tname = 'main'\ndef func():\nlocal.tname = 'notmain'\nprint(local.tname)\nif __name__ == '__main__':\nt1 = threading.Thread(target=func)\nt1.start()\nt1.join()\nprint(local.tname)\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#lock","title":"Lock","text":"<p>Lock\uff08\u6307\u4ee4\u9501\uff09\u662f\u53ef\u7528\u7684\u6700\u4f4e\u7ea7\u7684\u540c\u6b65\u6307\u4ee4\uff0cLock\u5904\u4e8e\u9501\u5b9a\u72b6\u6001\u65f6\uff0c\u4e0d\u88ab\u7279\u5b9a\u7684\u7ebf\u7a0b\u62e5\u6709\u3002Lock\u5305\u542b\u4e24\u79cd\u72b6\u6001\uff0c\u9501\u5b9a\u548c\u975e\u9501\u5b9a</p> Lock <pre><code>import threading\nimport time\ndata = 0\nlock = threading.Lock()\ndef func():\nglobal data\nprint(f'{threading.current_thread().name} acquire lock...')\n# \u8c03\u7528acquire([timeout])\u65f6\uff0c\u7ebf\u7a0b\u5c06\u4e00\u76f4\u963b\u585e\uff0c\u76f4\u5230\u83b7\u5f97\u9501\u6216\u8005\u76f4\u5230timeout\u5230\u671f\u540e\nif lock.acquire():\nprint(f'{threading.current_thread().name} get the lock.')\ndata += 1\ntime.sleep(2)\nprint(f'{threading.current_thread().name} release the lock.')\nlock.release()\ndef testLock():\nt1 = threading.Thread(target=func)\nt2 = threading.Thread(target=func)\nt3 = threading.Thread(target=func)\nt1.start()\nt2.start()\nt3.start()\nif __name__ == '__main__':\ntestLock()\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#rlock","title":"RLock","text":"<p>RLock\uff08\u53ef\u91cd\u5165\u9501\uff09\u662f\u4e00\u4e2a\u53ef\u4ee5\u88ab\u540c\u4e00\u4e2a\u7ebf\u7a0b\u8bf7\u6c42\u591a\u6b21\u7684\u540c\u6b65\u6307\u4ee4\uff0cRLock\u5904\u4e8e\u9501\u5b9a\u72b6\u6001\u65f6\uff0c\u62e5\u6709RLock\u7684\u7ebf\u7a0b\u53ef\u4ee5\u518d\u6b21\u8c03\u7528acquire()\uff0c\u91ca\u653e\u9501\u65f6\u9700\u8981\u8c03\u7528release()\u76f8\u540c\u6b21\u6570</p> code1 <pre><code>import threading\nimport time\ndata = 0\nrlock = threading.RLock()\ndef func():\nglobal data\nprint(f'{threading.current_thread().name} acquire lock...')\n# \u8c03\u7528acquire([timeout])\u65f6\uff0c\u7ebf\u7a0b\u5c06\u4e00\u76f4\u963b\u585e\uff0c\u76f4\u5230\u83b7\u5f97\u9501\u6216\u8005\u76f4\u5230timeout\u5230\u671f\u540e\nif rlock.acquire():\nprint(f'{threading.current_thread().name} get the lock.')\ntime.sleep(2)\nprint(f'{threading.current_thread().name} acquire lock again...')\n# \u7b2c\u4e8c\u6b21\u8bf7\u6c42\u9501\u5b9a\nif rlock.acquire():\nprint(f'{threading.current_thread().name} get the lock.')\nprint(f'{threading.current_thread().name} release the lock.')\nrlock.release()\ntime.sleep(2)\n# \u7b2c\u4e8c\u6b21\u91ca\u653e\u9501\nprint(f'{threading.current_thread().name} release the lock.')\nrlock.release()\ndef testRLock():\nt1 = threading.Thread(target=func)\nt2 = threading.Thread(target=func)\nt3 = threading.Thread(target=func)\nt1.start()\nt2.start()\nt3.start()\nif __name__ == '__main__':\ntestRLock()\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#semaphore","title":"Semaphore","text":"<p>Semaphore(\u4fe1\u53f7\u91cf),\u5185\u7f6e\u7684\u8ba1\u6570\u5668</p> Semaphore <pre><code>import threading\nimport time\nsem = threading.Semaphore(2)\ndef func():\nprint(f'{threading.current_thread().name} acquire semaphore...')\nif sem.acquire():\nprint(f'{threading.current_thread().name} get semaphore...')\ntime.sleep(4)\nprint(f'{threading.current_thread().name} release semaphore...')\nsem.release()\nif __name__ == '__main__':\nt1 = threading.Thread(target=func)\nt2 = threading.Thread(target=func)\nt3 = threading.Thread(target=func)\nt4 = threading.Thread(target=func)\nt1.start()\nt2.start()\nt3.start()\nt4.start()\ntime.sleep(2)\nprint('MainThread release semaphore without acquire')\nsem.release()\n</code></pre>"},{"location":"4-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/4.2.%E5%A4%9A%E7%BA%BF%E7%A8%8B/#timer","title":"Timer\uff08\u5b9a\u65f6\u5668\uff09","text":"Timer <pre><code>import threading\ndef func():\nprint('hello timer!')\nif __name__ == '__main__':\ntimer = threading.Timer(5, func)\ntimer.start()\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.1.%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/","title":"\u6587\u4ef6\u76ee\u5f55","text":""},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.1.%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/#_2","title":"\u6587\u4ef6\u8bfb\u5199","text":"\u6a21\u5f0f \u63cf\u8ff0 t \u6587\u672c\u6a21\u5f0f (\u9ed8\u8ba4)\u3002 x \u5199\u6a21\u5f0f\uff0c\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u4f1a\u62a5\u9519\u3002 b \u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002 + \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c\u66f4\u65b0(\u53ef\u8bfb\u53ef\u5199)\u3002 U \u901a\u7528\u6362\u884c\u6a21\u5f0f\uff08\u4e0d\u63a8\u8350\uff09\u3002 r \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\u6587\u4ef6\u7684\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002 rb \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u53ea\u8bfb\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002\u4e00\u822c\u7528\u4e8e\u975e\u6587\u672c\u6587\u4ef6\u5982\u56fe\u7247\u7b49\u3002 r+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002 rb+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u4e00\u822c\u7528\u4e8e\u975e\u6587\u672c\u6587\u4ef6\u5982\u56fe\u7247\u7b49\u3002 w \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5373\u539f\u6709\u5185\u5bb9\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 wb \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5373\u539f\u6709\u5185\u5bb9\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002\u4e00\u822c\u7528\u4e8e\u975e\u6587\u672c\u6587\u4ef6\u5982\u56fe\u7247\u7b49\u3002 w+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5373\u539f\u6709\u5185\u5bb9\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 wb+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5373\u539f\u6709\u5185\u5bb9\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002\u4e00\u822c\u7528\u4e8e\u975e\u6587\u672c\u6587\u4ef6\u5982\u56fe\u7247\u7b49\u3002 a \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u5185\u5bb9\u5c06\u4f1a\u88ab\u5199\u5165\u5230\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u8fdb\u884c\u5199\u5165\u3002 ab \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u5185\u5bb9\u5c06\u4f1a\u88ab\u5199\u5165\u5230\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u8fdb\u884c\u5199\u5165\u3002 a+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002\u6587\u4ef6\u6253\u5f00\u65f6\u4f1a\u662f\u8ffd\u52a0\u6a21\u5f0f\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002 ab+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002 \u8bfb\u6587\u4ef6\u8bfb\u8f6cBase64\u5199\u6587\u4ef6 <pre><code>def testReadFile(filepath=''):\n# rb \u4e8c\u8fdb\u5236\u8bfb\u53d6\nwith open(filepath, 'rb') as f:\nstr = f.read()\nprint(str)\ndef testReadFileLines(filepath=''):\n# rb \u4e8c\u8fdb\u5236\u8bfb\u53d6\nwith open(filepath, 'rb') as f:\nlines = f.readlines()\nprint(lines)\ndef testReadFile(filepath=''):\n# rb \u4e8c\u8fdb\u5236\u8bfb\u53d6\nwith open(filepath, 'rb') as f:\nwhile True:\nchunk = f.readline()\nprint(chunk)\nif not chunk:\nbreak\n</code></pre> <pre><code>def testReadFile2Base64(filepath=''):\n# rb \u4e8c\u8fdb\u5236\u8bfb\u53d6\nwith open(filepath, 'rb') as f:\nbase64str = base64.b64encode(f.read())\nprint(base64str)\n</code></pre> <pre><code># \u6587\u4ef6\u7684\u5199\u5165\uff0cw\uff1a\u5199\u6587\u672c\uff0cwb\uff1a\u5199\u4e8c\u8fdb\u5236\u6587\u4ef6\ndef testWriteFile(filepath=''):\nwith open(filepath, 'w') as f:\nf.write(\"hello world!\\r\")\ndef testWriteFileLines(filepath=''):\nwith open(filepath, 'a') as f:\nf.writelines(['hello', 'world'])\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.1.%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/#_3","title":"\u904d\u5386\u6587\u4ef6\u5939","text":"walk()listdir()glob()scanDir() <pre><code># \u904d\u5386\u6587\u4ef6\u5939,\u5305\u542b\u5b50\u76ee\u5f55\ndef testWalkFiles(filePath):\nfor dirpath, dirnames, filenames in os.walk(filePath):\nif dirnames:\nprint(dirpath)\nprint(dirnames)\nif filenames:\nprint(dirpath)\nprint(filenames)\n</code></pre> <pre><code># \u904d\u5386\u6587\u4ef6\u5939,\u53ea\u5305\u542b\u5f53\u524d\u76ee\u5f55\ndef testListDir(filePath):\nfor file in os.listdir(filePath):\nprint(file)\n# \u8fd4\u56de\u5b50\u76ee\u5f55\u540d\u79f0\ndef listDirName(filePath):\nreturn [file for file in os.listdir(filePath) if os.path.isdir(os.path.join(filePath, file))]\n# \u8fd4\u56de\u5b50\u76ee\u5f55\ndef listDir(filePath):\nreturn [os.path.join(filePath, file) for file in os.listdir(filePath) if\nos.path.isdir(os.path.join(filePath, file))]\n</code></pre> <pre><code>import glob\n# \u904d\u5386\u6587\u4ef6\u5939,\u5339\u914d\u6b63\u5219\ndef testglobDir():\n# \u9ed8\u8ba4\u5f53\u524d\u6267\u884c\u76ee\u5f55\nfor file in glob.glob(r'../*.py', recursive=True):\nprint(file)\nfor file in glob.glob('*.md', root_dir='E:/NoodlesGuide', recursive=True):\nprint(file)\n</code></pre> <pre><code># \u904d\u5386\u6587\u4ef6\u5939,\u53ea\u5305\u542b\u5f53\u524d\u76ee\u5f55\ndef testScanDir(filePath):\nfor entry in os.scandir(filePath):\nprint(entry)\nprint(entry.is_file())\nprint(entry.is_dir())\nprint(entry.name)\nprint(entry.path)\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.1.%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/#_4","title":"\u83b7\u53d6\u6587\u4ef6\u540d/\u8def\u5f84","text":"\u83b7\u53d6\u6587\u4ef6\u540d\u83b7\u53d6\u8def\u5f84 <pre><code># \u4ece\u6587\u4ef6\u8def\u5f84\u4e2d\u83b7\u53d6\u6700\u540e\u7684\u6587\u4ef6\u540d\ndef testGetFileName(filePath):\nprint(filePath.split('\\\\')[-1])\nprint(os.path.basename(filePath))\n# \u4ece\u6587\u4ef6\u8def\u5f84\u4e2d\u83b7\u53d6\u6700\u540e\u7684\u6587\u4ef6\u540d\ndef testGetFileNameWithoutSuf(filePath):\nprint(os.path.splitext(filePath)[0])\n</code></pre> <pre><code>def testGetPath():\nprint('\u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u8def\u5f84\uff1a', os.getcwd())\nprint('\u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u8def\u5f84\uff1a', os.path.abspath('.'))\nprint('\u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u6587\u4ef6\u4e0b\u7684\u5de5\u4f5c\u76ee\u5f55\u8def\u5f84\uff1a', os.path.abspath('testBase64.py'))\nprint('\u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u7236\u76ee\u5f55\u8def\u5f84\uff1a', os.path.abspath('..'))\nprint('\u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u8def\u5f84\uff1a', os.path.abspath(os.curdir))\nprint('\u5f53\u524d\u7528\u6237\u8def\u5f84\uff1a', os.path.expanduser('~'))\nprint('\u5f53\u524d\u7528\u6237\u684c\u9762\u8def\u5f84\uff1a', os.path.join(os.path.expanduser('~'), 'Desktop'))\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.1.%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/#_5","title":"\u6587\u4ef6\u5904\u7406","text":"\u5224\u65ad\u6587\u4ef6/\u76ee\u5f55\u521b\u5efa\u6587\u4ef6\u5939\u5220\u9664\u76ee\u5f55\u91cd\u547d\u540d\u79fb\u52a8\u6587\u4ef6 <pre><code># \u5224\u65ad\u662f\u5426\u662f\u6587\u4ef6/\u76ee\u5f55\ndef testIsFile(filePath):\nprint(os.path.isfile(filePath))\nprint(os.path.isdir(filePath))\n</code></pre> <pre><code>def testCreateDir(filePath):\n# \u521b\u5efa\u4e00\u5c42\u76ee\u5f55\n# print(os.mkdir(filePath))\n# \u521b\u5efa\u591a\u5c42\u76ee\u5f55\nprint(os.makedirs(filePath))\n</code></pre> <pre><code># \u5220\u9664\u76ee\u5f55\ndef testRmdir(filepath=''):\nprint(os.rmdir(filepath))\n# \u9012\u5f52\u5220\u9664\u591a\u5c42\u76ee\u5f55\u548c\u6587\u4ef6\ndef delMultiDir(filepath=''):\nls = os.listdir(filepath)\nfor i in ls:\ncpath = os.path.join(filepath, i)\nif os.path.isdir(cpath):\ndelMultiDir(cpath)\nos.rmdir(cpath)\nelse:\nos.remove(cpath)\n</code></pre> <pre><code>def testRenameFile(srcFileName, destFileName):\nos.rename(srcFileName, destFileName)\n# \u6279\u91cf\u6587\u4ef6\u91cd\u547d\u540d\ndef testRenameFiles(filepath, pre):\nmark = '[%s]' % pre\noldNames = os.listdir(filepath)\nfor oldName in oldNames:\nos.rename(os.path.join(filepath, oldName), os.path.join(filepath, mark + oldName))\n</code></pre> <pre><code>import shutil\ndef testMoveFile(srcFile, destFile):\nif not os.path.exists(destFile):\nos.makedirs(destFile)\nshutil.move(srcFile, destFile)\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.1.%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/#base64","title":"Base64","text":"base64 <pre><code>mport json\nimport base64\nif __name__ == '__main__':\ndata = {\"uname\": \"\u5f20\u4e09\", \"uid\": 3}\n# \u5148\u8f6c\u5316\u4e3abytes\u7c7b\u578b\u6570\u636e\ndata_bytes = json.dumps(data, ensure_ascii=False).encode() # \u6ce8\u610fensure_ascii=False\uff0c\u907f\u514d\u4e2d\u6587\u663e\u793a\u672a\u7f16\u7801\nprint(type(data_bytes))\n# \u7f16\u7801\nbase_data = base64.b64encode(data_bytes)\nprint(base_data)\n# \u89e3\u7801\n# string_bytes = b'eyJ1bmFtZSI6ICLlvKDkuIkiLCAidWlkIjogM30='\nori_data = base64.b64decode(base_data).decode() # \u6ce8\u610f\u7f16\u7801\u683c\u5f0f\uff0c\u6b63\u5e38\u663e\u793a\u4e2d\u6587\n# \u5b57\u7b26\u4e32\nprint(ori_data)\n# \u53d8\u56de\u539f\u6765\u7684\u5b57\u5178\ndata = json.loads(ori_data)\nprint(type(data))\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.1.%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/#fileinput","title":"fileinput","text":"input <pre><code>import fileinput\ndef testInput(filepath = ''):\nfor line in fileinput.input(filepath):\nprint(line)\nif __name__ == '__main__':\ntestInput('../../files/11.txt')\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.2.Excel%E5%A4%84%E7%90%86/","title":"Excel\u5904\u7406","text":""},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.2.Excel%E5%A4%84%E7%90%86/#xlwings","title":"xlwings","text":""},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.2.Excel%E5%A4%84%E7%90%86/#excel_1","title":"\u8bfbExcel","text":"\u8bfb\u5185\u5bb9\u6700\u5927\u884c\u5217 <pre><code>def testReadSheet():\napp = xw.App(visible=False, add_book=False)\nwb = app.books.open(r'..\\..\\files\\testxlwings1.xlsx')\nsheet = wb.sheets['\u8868\u683c2']\nprint(sheet.range('A1').value)\nprint(sheet.range('A2').value)\nprint(sheet.range('B2').value)\n# \u4eceA1\u5f00\u59cb\u8bfb\nprint(sheet.range('A1').expand().value)\n# \u8bfb\u53d6\u4e00\u6bb5\u533a\u95f4\u5185\u7684\u503c\nprint(sheet.range('a1:c12').options(ndim=2).value)  # \u52a0\u4e0a option \u8bfb\u53d6\u4e8c\u7ef4\u7684\u6570\u636e\nprint(sheet.range((1, 1), (12, 3)).options(ndim=2).value)  # \u548c\u4e0a\u9762\u8bfb\u53d6\u7684\u5185\u5bb9\u4e00\u6837\u3002\nwb.close()\napp.quit()\n</code></pre> <pre><code>def testReadSheetLastCell():\napp = xw.App(visible=False, add_book=False)\nwb = app.books.open(r'..\\..\\files\\testxlwings1.xlsx')\nsheet = wb.sheets['\u8868\u683c2']\ncell = sheet.used_range.last_cell\nrows = cell.row\ncolumns = cell.column\nprint(f\"\u6700\u5927\u884c\uff1a{rows}, \u6700\u5927\u5217\uff1a{columns}\")\nwb.close()\napp.quit()\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.2.Excel%E5%A4%84%E7%90%86/#excel_2","title":"\u5199Excel","text":"code <pre><code>def testWriteNewFile():\napp = xw.App(visible=False, add_book=False)\nwb = app.books.add()\nsheet = wb.sheets['sheet1']\nsheet.name = 'dddd'\nsheet1 = wb.sheets.add('\u8868\u683c1')\nsheet2 = wb.sheets.add('\u8868\u683c2', after='sheet2')\nsheet1.range('A1').value = '\u5355\u5143\u683cA1'\nsheet1.range('A2').value = [1,2,3,4,5,6,7]\nsheet1.range('A3').value = [22, 33, 44, 55]\n# \u5199\u5165\u884c\uff0c\u8f6c\u7f6e\nsheet1.range('A4').options(transpose = True).value = [22, 33, 44, 55]\n#\u8bbe\u7f6e\u5355\u5143\u683c\u683c\u5f0f\u4e3a\u6587\u672c\u683c\u5f0f\nsheet.range('B1:B100').api.NumberFormat = \"@\"\n# range('A2').api.NumberFormat = \"0.0\"  # \u8bbe\u7f6e\u4e3a\u5c0f\u6570\u683c\u5f0f\n# range('A3').api.NumberFormat = \"yyyy-mm-dd\"  # \u8bbe\u7f6e\u4e3a\"-\"\u8fde\u63a5\u7684\u65e5\u671f\u683c\u5f0f\n# range('A4').api.NumberFormat = \"0%\"  # \u8bbe\u7f6e\u4e3a\u767e\u5206\u6bd4\n# \u9ed8\u8ba4\u8d77\u70b9A6\uff0c\u63d2\u5165\u4e09\u884c\u4e24\u5217\nsheet.range('A1').value = [['\u5e8f\u53f7', '\u6d41\u7a0b\u7f16\u53f7', '\u5ba2\u6237\u540d\u79f0', '\u63a5\u53e3\u8c03\u7528\u65f6\u95f4'], ['1', '20220401152317029847', '\u6613\u70ca\u5343\u73ba', '2020-09-18 14:39:42'], ['2', '20220402102309127779', '\u9648\u5bb9', '2020-09-18 14:39:42'], ['3', '2022040201950300001', '\u5f20\u4e09', '2020-09-18 14:39:42'], ['4', '20220402180330329928', '\u5218\u6587\u6d69', '2020-09-18 14:39:42'], ['5', '20220406102227499593', '\u9676\u8273\u83ca', '2020-09-18 14:39:42'], ['6', '20220406103341506920', '\u8d3a\u8001\u5e08', '2020-09-18 14:39:42'], ['7', '20220406151033202999', '\u6b66\u6c49', '2020-09-18 14:39:42'], ['8', '20220406150425333831', '\u5f20\u8001\u5e08', '2020-09-18 14:39:42'], ['9', '20220406145903401880', '\u4e01\u8001\u5e08', '2020-09-18 14:39:42']]\nsheet2.range('A10').value = [[1,2], [3, 4], [5, 6]]\nwb.save(r'..\\files\\testxlwings2.xlsx')\n# \u5982\u679c\u8d44\u6e90\u4e0d\u5173\u95ed\uff0c\u4efb\u7136\u8fd8\u662f\u53ef\u4ee5\u5bf9\u5de5\u4f5c\u7c3f\u8fdb\u884c\u64cd\u4f5c\n# \u540e\u5199\u5165\u7684\u5185\u5bb9\u9700\u8981\u91cd\u65b0\u4fdd\u5b58\n# sheet.range('A6').value='\u6211\u7ed9\u4e86\u5355\u5143\u683cA1\u4e00\u4e2a\u503c5'\n# wb.save()  #\u540e\u9762\u7684\u4fdd\u5b58\u4e0d\u9700\u8981\u4f20\u5165\u6587\u4ef6\n# \u5173\u95edExcel\u7a0b\u5e8f,\n# \u5982\u679c\u4e0d\u5173\u95ed\u8d44\u6e90\uff0c\u91cd\u590d\u6267\u884c\u7684\u8bdd\uff0c\u5219\u4f1a\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5de5\u4f5c\u7c3f\nwb.close()\napp.quit()\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.3.Json%E5%A4%84%E7%90%86/","title":"Json","text":""},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.3.Json%E5%A4%84%E7%90%86/#json_1","title":"json\u5e8f\u5217\u5316","text":"jsonjson2Dictlist2Json <pre><code>def toJson(obj):\nreturn json.dumps(obj, ensure_ascii=False)\ndef fromJson(str=''):\nreturn json.loads(str)\n</code></pre> <pre><code># \u5c06\u5b57\u7b26\u4e32\u5e8f\u5217\u5316\u6210\u5b57\u5178\ndef testJson2Dict():\ndictStr = '{\"code\": \"0000\", \"message\": \"\u6210\u529f\"}'\nprint(type(dictStr))\ndictJson = json.loads(dictStr)\nprint(type(dictJson))\nprint(dictJson)\n</code></pre> <pre><code># \u5c06\u4e00\u4e2a\u5217\u8868\u7c7b\u578b\u7684\u53d8\u91cf\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32\u7c7b\u578b\n# Author: Noodles\n# Date: 2023/5/16 10:23\ndef testList2Json():\njsonli = [11, 22, 33, 44]\nprint(type(jsonli))\njson_str = json.dumps(jsonli)\nprint(type(json_str))\nprint(json_str)\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.3.Json%E5%A4%84%E7%90%86/#jsoncsv","title":"json/csv\u6587\u4ef6\u8f6c\u6362","text":"<ul> <li>data.csv</li> </ul> <pre><code>20220811215436353730,RJ,72,2022-08-11 21:54:36\n20220811214648428365,RJ,72,2022-08-11 21:46:49\n20220811213735371161,RJ,72,2022-08-11 21:37:36\n20220811213445290102,EN,72,2022-08-11 21:34:46\n20220811205119806463,EN,89,2022-08-11 20:51:19\n20220811195815295185,RJ,76,2022-08-11 19:58:16\n20220811194516451061,RJ,89,2022-08-11 19:45:16\n20220811193004779187,EN,870,2022-08-11 19:30:04\n20220811191416240723,RJ,89,2022-08-11 19:14:16\n20220811190638260154,RJ,76,2022-08-11 19:06:38\n</code></pre> <ul> <li>data.json</li> </ul> <pre><code>[{\"applyCode\": \"20220811215436353730\", \"approveStatus\": \"RJ\", \"productCode\": \"72\", \"updatedDate\": \"2022-08-11 21:54:36\"},\n{\"applyCode\": \"20220811214648428365\", \"approveStatus\": \"RJ\", \"productCode\": \"72\", \"updatedDate\": \"2022-08-11 21:46:49\"},\n{\"applyCode\": \"20220811213735371161\", \"approveStatus\": \"RJ\", \"productCode\": \"72\", \"updatedDate\": \"2022-08-11 21:37:36\"},\n{\"applyCode\": \"20220811213445290102\", \"approveStatus\": \"EN\", \"productCode\": \"72\", \"updatedDate\": \"2022-08-11 21:34:46\"},\n{\"applyCode\": \"20220811205119806463\", \"approveStatus\": \"EN\", \"productCode\": \"89\", \"updatedDate\": \"2022-08-11 20:51:19\"},\n{\"applyCode\": \"20220811195815295185\", \"approveStatus\": \"RJ\", \"productCode\": \"76\", \"updatedDate\": \"2022-08-11 19:58:16\"},\n{\"applyCode\": \"20220811194516451061\", \"approveStatus\": \"RJ\", \"productCode\": \"89\", \"updatedDate\": \"2022-08-11 19:45:16\"}]\n</code></pre> csv\u8f6cjsonjson\u8f6ccsv <pre><code># \u8bfbcsv\u6587\u4ef6\u683c\u5f0f\u8f6c\u6362\u6210json\u683c\u5f0f\u5b57\u7b26\u4e32\n# Author: Noodles\n# Date: 2023/5/16 10:28\ndef testCsv2Json(filepath=''):\nwith open(filepath, 'r') as f:\nfor line in f.readlines():\nif line == []:\ncontinue\nline = line.strip()\nakk = [y for y in line.split(\",\")]\nkey1 = ['applyCode', 'approveStatus', 'productCode', 'updatedDate']\na1 = dict(zip(key1, akk))\na1 = json.dumps(a1)\nprint(a1)\n</code></pre> <pre><code># \u8bfbJson\u6587\u4ef6\u683c\u5f0f\u8f6c\u6362\u6210CSV\u683c\u5f0f\u5b57\u7b26\u4e32\ndef testJson2Csv(filepath=''):\nfr = open('data.json', 'r')\nls = json.load(fr)\n# \u83b7\u53d6\u5217\u540d\u5b57\ndata = [list(ls[0].keys())]\nfor item in ls:\ndata.append(list(item.values()))\nfr.close()\nfw = open('json.csv', 'w')\nfor line in data:\nfw.write(\",\".join(line) + '\\n')\nfw.close()\n</code></pre>"},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.4.pdf%E5%A4%84%E7%90%86/","title":"PDF\u5904\u7406","text":""},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.4.pdf%E5%A4%84%E7%90%86/#pdfplumber","title":"pdfplumber","text":""},{"location":"5-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/5.4.pdf%E5%A4%84%E7%90%86/#pdf_1","title":"pdf\u8f6c\u56fe\u7247","text":"<p>\u6bcf\u4e2apdf\u6309\u9875\u8f6c\u56fe\u7247\uff0c\u6309\u7167pdf\u6570\u8fdb\u884c\u8fdb\u7a0b\u6570\u5207\u5272</p> code <pre><code># -*- coding: UTF-8 -*-\nimport datetime\nimport math\nimport os\nfrom multiprocessing import Process, Manager, cpu_count\nimport pdfplumber\nfrom utils.log import Logger\n\"\"\"\n\u6bcf\u4e2apdf\u6309\u9875\u8f6c\u56fe\u7247\uff0c\u6309\u7167pdf\u6570\u8fdb\u884c\u8fdb\u7a0b\u6570\u5207\u5272\n\"\"\"\nclass PdfToImageTest(object):\nlog = Logger().logger\n# \u6570\u636e\u521d\u59cb\u5316\ndef __init__(self):\nself.icbcDataDict = {}\ndef infoProcess(self, filePath):\nself.log.info('\u6587\u4ef6:%s, module_name:%s, parent_process:%s, process_id:%s', filePath, __name__, os.getppid(),\nos.getpid())\ndef pdfToImage(self, pdfPaths, begin, end):\nself.infoProcess(pdfPaths)\npdfPathList = pdfPaths[begin: end]\nfor pdfPath in pdfPathList:\ntry:\npdf = pdfplumber.open(pdfPath)\n# \u6bcf\u4e2a\u6587\u4ef6\u521b\u5efa\u4e2a\u5bf9\u5e94\u7684\u76ee\u5f55\nsavePath = os.path.splitext(pdfPath)[0]\nos.makedirs(savePath, exist_ok=True)\nprint(pdfPath)\nfor page in pdf.pages:\nim = page.to_image(resolution=100)\nimagePath = savePath + '/' + str(page.page_number) + '.png'\nprint(imagePath)\nim.save(imagePath, format=\"PNG\")\npage.flush_cache()\nexcept Exception as e:\nself.log.error('\u8bfb\u53d6\u5f02\u5e38%s', e)\nraise e\nfinally:\npdf.flush_cache()\ndef pdfToImages(self, pdfPaths=[]):\npageCount = len(pdfPaths)\ncpuCount = cpu_count()\n# cpuCount = 6\nprocessLen = cpuCount if cpuCount &lt;= pageCount else pageCount\nself.log.info(\"\u6587\u4ef6:%s, \u9875\u6570:%s,cpu\u6570\u91cf:%s, \u8fdb\u7a0b\u6570:%s\", pdfPaths, pageCount, cpuCount, processLen)\nsplitCount = math.ceil(pageCount / processLen)\n# \u521b\u5efa\u4fdd\u5b58\u76ee\u5f55\nwith Manager() as manager:\nlist = []\nprocess = []\nfor i in range(0, processLen):\nbegin = i * splitCount\nend = pageCount if i == processLen - 1 else splitCount * (i + 1)\nprint(begin, end)\nprocesslist = manager.list()\np = Process(target=self.pdfToImage, args=(pdfPaths, begin, end))\np.start()\nprocess.append(p)\nlist.append(processlist)\nfor p in process:\np.join()\nif __name__ == '__main__':\nstarttime = datetime.datetime.now()\npdfToImage = PdfToImageTest()\npdfDir = r'E:\\\u684c\u9762\u5de5\u4f5c\\0-\u5de5\u4f5c\\11-\u8d26\u5355\u8bc6\u522b\\pdfToImage\\2';\nscanDir = os.scandir(pdfDir)\npdfPaths=[]\nfor file in scanDir:\npdfPaths.append(file.path)\npdfToImage.pdfToImages(pdfPaths)\nendtime = datetime.datetime.now()\nprint(f'\u8017\u65f6\uff1a', (endtime - starttime).seconds)\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.1.Oracle/","title":"Oracle","text":""},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.1.Oracle/#oracledb","title":"oracledb","text":"oracledbUtil <pre><code>import oracledb\n# \u4f7f\u7528oracledb\u6a21\u5757\u5b9e\u73b0Oracle\u5de5\u5177\u7c7b\n# @file oracledbUtil.py\n# @author \u5deb\u5a01\n# @date 2023/7/4 14:45\nclass OracledbUtil(object):\ndef __init__(self):\nself.conn = None\nself.pool = None\ndef initConnThin(self, dsn=''):\ntry:\nself.conn = oracledb.connect(dsn)\nprint('\u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5')\nexcept Exception as e:\nprint(e)\nraise e\ndef initConnThinPool(self, dsn=''):\ntry:\nself.pool = oracledb.create_pool(dsn=dsn, min=2, max=5, increment=1)\nprint('\u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\u6c60')\nexcept Exception as e:\nprint(e)\nraise e\ndef initConnThick(self, dsn='', oracleClientPath=''):\ntry:\noracledb.init_oracle_client(config_dir=oracleClientPath)\nself.conn = oracledb.connect(dsn)\nprint('\u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5')\nexcept Exception as e:\nprint(e)\nraise e\ndef initConnThickPool(self, dsn='', oracleClientPath=''):\ntry:\noracledb.init_oracle_client(config_dir=oracleClientPath)\nself.pool = oracledb.create_pool(dsn=dsn, min=2, max=5, increment=1)\nprint('\u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\u6c60')\nexcept Exception as e:\nprint(e)\nraise e\ndef close(self):\nif self.conn is not None:\nself.conn.close()\nprint('\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5')\ndef selectAll(self, sql, parameters=None):\ncursor = None\ntry:\ncursor = self.conn.cursor()\ncursor.execute(sql, parameters)\nreturn cursor.fetchall()\nexcept Exception as e:\nprint(e)\nraise e\nfinally:\nif cursor is not None:\ncursor.close()\nif __name__ == '__main__':\npass\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.1.Oracle/#_1","title":"\u6570\u636e\u67e5\u8be2","text":"\u67e5\u8be2\u6d4b\u8bd5 <pre><code>## uat\u6570\u636e\u5e93\nURL = 'jdbc:oracle:thin:@127.0.0.1:1521/db'\nUSER = 'user'\nPWD = 'password'\nquerySql = '''\n            select t.business_id as \u6d41\u7a0b\u7f16\u53f7,\n                   t.name        as \u5ba2\u6237\u540d\u79f0,\n                   t.report_time as \u63a5\u53e3\u8c03\u7528\u65f6\u95f4\n              from bh_c1query_applyinfo t\n             where t.mer_no = ?\n               and t.status = 1\n               and trunc(t.created_date) &gt;= trunc(to_date(?, 'YYYYMMDD'))\n               and trunc(t.created_date) &lt;= trunc(to_date(?, 'YYYYMMDD'))\n             order by t.created_date asc\n    '''\ndef testExportDataToFile():\ntry:\nprint('\u521d\u59cb\u5316\u6570\u636e\u5e93start')\noracleJdbcUtil = OracleJdbcUtil()\noracleJdbcUtil.initConn(URL, USER, PWD)\nprint('\u521d\u59cb\u5316\u6570\u636e\u5e93done')\nsqlParams = ['201910091353260001', '20230601', '20230630']\nresultList = oracleJdbcUtil.selectAll(querySql, sqlParams)\nprint('size:', len(resultList))\nprint(resultList)\nexcept Exception as e:\ntraceback.print_exc()\nfinally:\noracleJdbcUtil.close()\nprint('\u6570\u636e\u5e93\u8fde\u63a5\u5173\u95ed')\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.2.Mysql/","title":"Mysql","text":""},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.2.Mysql/#mysqlconnector","title":"mysql.connector","text":""},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.2.Mysql/#_1","title":"\u8fde\u63a5","text":"code <pre><code>LOCAL_DB_CONFIG = {\n'user': 'root',\n'password': 'admin123',\n'host': '10.168.96.41',\n'port': 3306,\n'database': 'employees',\n'raise_on_warnings': True\n}\n# \u6d4b\u8bd5\u8fde\u63a5\ndef testConnector():\ntry:\n# cnx = mysql.connector.connect(user=USER, password=PSW, host=HOST, port=PORT,\n#                               database=DB)\ncnx = mysql.connector.connect(**LOCAL_DB_CONFIG)\nprint('Connect Success')\nexcept mysql.connector.Error as err:\nif err.errno == errorcode.ER_ACCESS_DENIED_ERROR:\nprint(\"Something is wrong with your user name or password\")\nelif err.errno == errorcode.ER_BAD_DB_ERROR:\nprint(\"Database does not exist\")\nelse:\nprint(err)\nelse:\ncnx.close()\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.2.Mysql/#_2","title":"\u589e\u5220\u6539\u67e5","text":"\u5efa\u8868\u63d2\u5165\u6570\u636e\u67e5\u8be2\u7f13\u5b58\u6e38\u6807 <pre><code>def testCreateTables():\nTABLES = {}\nTABLES['employees'] = (\n\"CREATE TABLE `employees` (\"\n\"  `emp_no` int(11) NOT NULL AUTO_INCREMENT,\"\n\"  `birth_date` date NOT NULL,\"\n\"  `first_name` varchar(14) NOT NULL,\"\n\"  `last_name` varchar(16) NOT NULL,\"\n\"  `gender` enum('M','F') NOT NULL,\"\n\"  `hire_date` date NOT NULL,\"\n\"  PRIMARY KEY (`emp_no`)\"\n\") ENGINE=InnoDB\")\nTABLES['departments'] = (\n\"CREATE TABLE `departments` (\"\n\"  `dept_no` char(4) NOT NULL,\"\n\"  `dept_name` varchar(40) NOT NULL,\"\n\"  PRIMARY KEY (`dept_no`), UNIQUE KEY `dept_name` (`dept_name`)\"\n\") ENGINE=InnoDB\")\nTABLES['salaries'] = (\n\"CREATE TABLE `salaries` (\"\n\"  `emp_no` int(11) NOT NULL,\"\n\"  `salary` int(11) NOT NULL,\"\n\"  `from_date` date NOT NULL,\"\n\"  `to_date` date NOT NULL,\"\n\"  PRIMARY KEY (`emp_no`,`from_date`), KEY `emp_no` (`emp_no`),\"\n\"  CONSTRAINT `salaries_ibfk_1` FOREIGN KEY (`emp_no`) \"\n\"     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE\"\n\") ENGINE=InnoDB\")\nTABLES['dept_emp'] = (\n\"CREATE TABLE `dept_emp` (\"\n\"  `emp_no` int(11) NOT NULL,\"\n\"  `dept_no` char(4) NOT NULL,\"\n\"  `from_date` date NOT NULL,\"\n\"  `to_date` date NOT NULL,\"\n\"  PRIMARY KEY (`emp_no`,`dept_no`), KEY `emp_no` (`emp_no`),\"\n\"  KEY `dept_no` (`dept_no`),\"\n\"  CONSTRAINT `dept_emp_ibfk_1` FOREIGN KEY (`emp_no`) \"\n\"     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,\"\n\"  CONSTRAINT `dept_emp_ibfk_2` FOREIGN KEY (`dept_no`) \"\n\"     REFERENCES `departments` (`dept_no`) ON DELETE CASCADE\"\n\") ENGINE=InnoDB\")\nTABLES['dept_manager'] = (\n\"  CREATE TABLE `dept_manager` (\"\n\"  `emp_no` int(11) NOT NULL,\"\n\"  `dept_no` char(4) NOT NULL,\"\n\"  `from_date` date NOT NULL,\"\n\"  `to_date` date NOT NULL,\"\n\"  PRIMARY KEY (`emp_no`,`dept_no`),\"\n\"  KEY `emp_no` (`emp_no`),\"\n\"  KEY `dept_no` (`dept_no`),\"\n\"  CONSTRAINT `dept_manager_ibfk_1` FOREIGN KEY (`emp_no`) \"\n\"     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,\"\n\"  CONSTRAINT `dept_manager_ibfk_2` FOREIGN KEY (`dept_no`) \"\n\"     REFERENCES `departments` (`dept_no`) ON DELETE CASCADE\"\n\") ENGINE=InnoDB\")\nTABLES['titles'] = (\n\"CREATE TABLE `titles` (\"\n\"  `emp_no` int(11) NOT NULL,\"\n\"  `title` varchar(50) NOT NULL,\"\n\"  `from_date` date NOT NULL,\"\n\"  `to_date` date DEFAULT NULL,\"\n\"  PRIMARY KEY (`emp_no`,`title`,`from_date`), KEY `emp_no` (`emp_no`),\"\n\"  CONSTRAINT `titles_ibfk_1` FOREIGN KEY (`emp_no`)\"\n\"     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE\"\n\") ENGINE=InnoDB\")\ncnx = mysql.connector.connect(**LOCAL_DB_CONFIG)\ncursor = cnx.cursor()\nfor table_name in TABLES:\ntable_description = TABLES[table_name]\ntry:\nprint(\"Creating table {}: \".format(table_name), end='')\ncursor.execute(table_description)\nexcept mysql.connector.Error as err:\nif err.errno == errorcode.ER_TABLE_EXISTS_ERROR:\nprint(\"already exists.\")\nelse:\nprint(err.msg)\nelse:\nprint(\"OK\")\ncursor.close()\ncnx.close()\n</code></pre> <pre><code>def testInsertData():\nadd_employee = (\"INSERT INTO employees \"\n\"(first_name, last_name, hire_date, gender, birth_date) \"\n\"VALUES (%s, %s, %s, %s, %s)\")\nadd_salary = (\"INSERT INTO salaries \"\n\"(emp_no, salary, from_date, to_date) \"\n\"VALUES (%(emp_no)s, %(salary)s, %(from_date)s, %(to_date)s)\")\ntomorrow = datetime.now().date() + timedelta(days=1)\ndata_employee = ('Geert', 'Vanderkelen', tomorrow, 'M', date(1977, 6, 14))\ncnx = mysql.connector.connect(user='scott', database='employees')\ncursor = cnx.cursor()\n# Insert new employee\ncursor.execute(add_employee, data_employee)\nemp_no = cursor.lastrowid\n# Insert salary information\ndata_salary = {\n'emp_no': emp_no,\n'salary': 50000,\n'from_date': tomorrow,\n'to_date': date(9999, 1, 1),\n}\ncursor.execute(add_salary, data_salary)\n# Make sure data is committed to the database\ncnx.commit()\ncursor.close()\ncnx.close()\n</code></pre> <pre><code>def testQueryData():\ncnx = mysql.connector.connect(**LOCAL_DB_CONFIG)\ncursor = cnx.cursor()\nquery = (\"SELECT first_name, last_name, hire_date FROM employees \"\n\"WHERE hire_date BETWEEN %s AND %s\")\nhire_start = date(1999, 1, 1)\nhire_end = date(1999, 12, 31)\ncursor.execute(query, (hire_start, hire_end))\nfor (first_name, last_name, hire_date) in cursor:\nprint(\"{}, {} was hired on {:%d %b %Y}\".format(\nlast_name, first_name, hire_date))\ncursor.close()\ncnx.close()\n</code></pre> <pre><code>def testBufferedCursor():\ncnx = mysql.connector.connect(**LOCAL_DB_CONFIG)\ncurA = cnx.cursor(buffered=True)\ncurB = cnx.cursor(buffered=True)\n# Query to get employees who joined in a period defined by two dates\nquery = (\n\"SELECT s.emp_no, salary, from_date, to_date FROM employees AS e \"\n\"LEFT JOIN salaries AS s USING (emp_no) \"\n\"WHERE to_date = DATE('9999-01-01')\"\n\"AND e.hire_date BETWEEN DATE(%s) AND DATE(%s)\")\n# UPDATE and INSERT statements for the old and new salary\nupdate_old_salary = (\n\"UPDATE salaries SET to_date = %s \"\n\"WHERE emp_no = %s AND from_date = %s\")\ninsert_new_salary = (\n\"INSERT INTO salaries (emp_no, from_date, to_date, salary) \"\n\"VALUES (%s, %s, %s, %s)\")\ntomorrow = datetime.now().date() + timedelta(days=1)\n# Select the employees getting a raise\ncurA.execute(query, (date(2000, 1, 1), date(2000, 12, 31)))\n# Iterate through the result of curA\nfor (emp_no, salary, from_date, to_date) in curA:\n# Update the old and insert the new salary\nnew_salary = int(round(salary * Decimal('1.15')))\ncurB.execute(update_old_salary, (tomorrow, emp_no, from_date))\ncurB.execute(insert_new_salary,\n(emp_no, tomorrow, date(9999, 1, 1, ), new_salary))\n# Commit the changes\ncnx.commit()\ncnx.close()\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.2.Mysql/#_3","title":"\u8fde\u63a5\u6c60","text":"\u8fde\u63a5\u6c60 <pre><code>def testConnectPool():\ncnx1 = mysql.connector.connect(pool_name = 'mypool', pool_size = 3, **LOCAL_DB_CONFIG)\ncnx2 = mysql.connector.connect(pool_name = 'mypool')\nprint(cnx1)\nprint(cnx2)\ncnx1.close()\ncnx2.close()\ndef testConnectPool1():\ncnxpool = mysql.connector.pooling.MySQLConnectionPool(pool_name = 'mypool', pool_size = 3, **LOCAL_DB_CONFIG)\ncnx1 = cnxpool.get_connection()\ncnx2 = cnxpool.get_connection()\nprint(cnx1)\nprint(cnx2)\ncnx1.close()\ncnx2.close()\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/","title":"Redis","text":""},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/#redis_1","title":"redis\u6a21\u5757","text":""},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/#_1","title":"\u521d\u59cb\u5316\u8fde\u63a5","text":"code <pre><code>REDIS_SERVER = '10.168.12.170'\nREDIS_PORT = 6379\nREDIS_PSW = 'foobared'\ndef initConn():\n# redis \u53d6\u51fa\u7684\u7ed3\u679c\u9ed8\u8ba4\u662f\u5b57\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u5b9a decode_responses=True \u6539\u6210\u5b57\u7b26\u4e32\nreturn redis.StrictRedis(host=REDIS_SERVER, port=REDIS_PORT, password=REDIS_PSW, db=0, decode_responses=True)\ndef initConnPool():\n# redis \u53d6\u51fa\u7684\u7ed3\u679c\u9ed8\u8ba4\u662f\u5b57\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u5b9a decode_responses=True \u6539\u6210\u5b57\u7b26\u4e32\npool = redis.ConnectionPool(host=REDIS_SERVER, port=REDIS_PORT, password=REDIS_PSW, db=0, decode_responses=True)\nreturn redis.StrictRedis(connection_pool=pool)\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/#_2","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c","text":"\u8bbe\u503c\u6279\u91cf\u8bbe\u7f6erange\u589e\u51cf <pre><code>r = initConnPool()\n# ex = 3\u8fc7\u671f\u65f6\u95f4\u4e3a3\u79d2\nr.set('food', 'mutton', ex=3)\nr.set('\u4e2d\u6587', '\u4e2d\u6587')\nprint(r.get('food'))\n# \u5982\u679c\u952efruit\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u8f93\u51fa\u662fTrue\uff1b\u5982\u679c\u952efruit\u5df2\u7ecf\u5b58\u5728\uff0c\u8f93\u51fa\u662fNone\nprint(r.set('fruit', 'watermelon', nx=True))\n# \u5982\u679c\u952efruit\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u8f93\u51fa\u662fTrue\uff1b\u5982\u679c\u952efruit\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa\u662fNone\nprint((r.set('fruit', 'watermelon', xx=True)))\n# \u8bbe\u7f6e\u503c\uff0c\u53ea\u6709name\u4e0d\u5b58\u5728\u65f6\uff0c\u6267\u884c\u8bbe\u7f6e\u64cd\u4f5c\uff08\u6dfb\u52a0\uff09\nprint(r.setnx('fruit1', 'banana'))\n# \u8fc7\u671f\u65f6\u95f4\u8bbe\u7f6e\nr.setex('fruit2', 2, 'orange')\ntime.sleep(2)\nprint(r.get('fruit2'))  # 5\u79d2\u540e\uff0c\u53d6\u503c\u5c31\u4eceorange\u53d8\u6210None\nr.psetex('fruit3', 5000, 'apple')\nprint(r.get('fruit3'))  # 5000\u6beb\u79d2\u540e\uff0c\u53d6\u503c\u5c31\u4eceapple\u53d8\u6210None\n</code></pre> <pre><code># \u6279\u91cf\u8bbe\u7f6e\u503c\nr.mset({'k1': 'v1', 'k2': 'v2'})  # \u8fd9\u91cck1 \u548ck2 \u4e0d\u80fd\u5e26\u5f15\u53f7\uff0c\u4e00\u6b21\u8bbe\u7f6e\u591a\u4e2a\u952e\u503c\u5bf9\nprint(r.mget('k1', 'k2'))  # \u4e00\u6b21\u53d6\u51fa\u591a\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\nprint(r.mget('k1'))\nprint(r.mget(['k1', 'k2']))\nprint(r.mget('fruit', 'fruit1', 'fruit2', 'k1', 'k2'))\n</code></pre> <pre><code> # \u83b7\u53d6\u5b50\u5e8f\u5217\uff08\u6839\u636e\u5b57\u8282\u83b7\u53d6\uff0c\u975e\u5b57\u7b26\uff09\nr.set('cn_name', '\u541b\u60dc\u5927\u5927')  # \u6c49\u5b57\nprint(r.getrange('cn_name', 0, 2))  # \u53d6\u7d22\u5f15\u53f7\u662f0-2 \u524d3\u4f4d\u7684\u5b57\u8282 \u541b \u5207\u7247\u64cd\u4f5c \uff08\u4e00\u4e2a\u6c49\u5b573\u4e2a\u5b57\u8282 1\u4e2a\u5b57\u6bcd\u4e00\u4e2a\u5b57\u8282 \u6bcf\u4e2a\u5b57\u82828bit\uff09\nprint(r.getrange('cn_name', 0, -1))  # \u53d6\u6240\u6709\u7684\u5b57\u8282 \u541b\u60dc\u5927\u5927 \u5207\u7247\u64cd\u4f5c\nr.set('en_name', 'junxi')  # \u5b57\u6bcd\nprint(r.getrange('en_name', 0, 2))  # \u53d6\u7d22\u5f15\u53f7\u662f0-2 \u524d3\u4f4d\u7684\u5b57\u8282 jun \u5207\u7247\u64cd\u4f5c \uff08\u4e00\u4e2a\u6c49\u5b573\u4e2a\u5b57\u8282 1\u4e2a\u5b57\u6bcd\u4e00\u4e2a\u5b57\u8282 \u6bcf\u4e2a\u5b57\u82828bit\uff09\nprint(r.getrange('en_name', 0, -1))  # \u53d6\u6240\u6709\u7684\u5b57\u8282 junxi \u5207\u7247\u64cd\u4f5c\n\"\"\"\n\u4fee\u6539\u5b57\u7b26\u4e32\u5185\u5bb9\uff0c\u4ece\u6307\u5b9a\u5b57\u7b26\u4e32\u7d22\u5f15\u5f00\u59cb\u5411\u540e\u66ff\u6362\uff08\u65b0\u503c\u592a\u957f\u65f6\uff0c\u5219\u5411\u540e\u6dfb\u52a0\uff09\n\u53c2\u6570 offset - \u5b57\u7b26\u4e32\u7684\u7d22\u5f15\uff0c\u5b57\u8282\uff08\u4e00\u4e2a\u6c49\u5b57\u4e09\u4e2a\u5b57\u8282\uff09\n\"\"\"\nr.setrange(\"en_name\", 1, \"ccc\")\nprint(r.get(\"en_name\"))  # jccci \u539f\u59cb\u503c\u662fjunxi \u4ece\u7d22\u5f15\u53f7\u662f1\u5f00\u59cb\u66ff\u6362\u6210ccc \u53d8\u6210 jccci\n</code></pre> <pre><code>r.set(\"foo1\", \"123.0\")\nr.set(\"foo2\", \"221.0\")\nprint(r.mget(\"foo1\", \"foo2\"))\nr.incrbyfloat(\"foo1\", amount=2.0)\nr.incrbyfloat(\"foo2\", amount=3.0)\nprint(r.mget(\"foo1\", \"foo2\"))\n# \u81ea\u51cf name \u5bf9\u5e94\u7684\u503c\uff0c\u5f53 name \u4e0d\u5b58\u5728\u65f6\uff0c\u5219\u521b\u5efa name\uff1damount\uff0c\u5426\u5219\uff0c\u5219\u81ea\u51cf\nr.decr(\"foo4\", amount=3)  # \u9012\u51cf3\nr.decr(\"foo1\", amount=1)  # \u9012\u51cf1\nprint(r.mget(\"foo1\", \"foo4\"))\n# \u5728redis name\u5bf9\u5e94\u7684\u503c\u540e\u9762\u8ffd\u52a0\u5185\u5bb9\nr.append(\"name\", \"haha\")  # \u5728name\u5bf9\u5e94\u7684\u503cjunxi\u540e\u9762\u8ffd\u52a0\u5b57\u7b26\u4e32haha\nprint(r.mget(\"name\"))\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/#hash","title":"Hash\u64cd\u4f5c","text":"codecode"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/#_3","title":"\u904d\u5386","text":"scan <pre><code>def testScan(conn, keypattern):\nbegin_pos = 0  # \u6700\u5f00\u59cb\u6e38\u6807\u4ece0\u5f00\u59cb\ndatalists = []\nnew_pos = conn.dbsize()\nwhile new_pos:\nnew_pos, datalist = conn.scan(begin_pos, keypattern, 1000)\nif len(datalist) &gt; 0:\nprint(datalist)\ndatalists += datalist\nbegin_pos = new_pos\nif len(datalists):\nprint(datalists)\nelse:\nprint(\"no key\")\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/#rediscluster","title":"redis.cluster","text":""},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/#_4","title":"\u521d\u59cb\u5316\u8fde\u63a5","text":"\u521d\u59cb\u5316\u8fde\u63a5 <pre><code>def initRedisCluster(host, port):\n# r = redis.RedisCluster(host='10.180.14.115', port=6500, decode_responses=True)\nr = redis.RedisCluster(host=host, port=port, decode_responses=True)\nprint(r.get_nodes())\nreturn r\ndef initUatRedisClusterByNodes():\nnode0 = ClusterNode('10.168.12.50', 5000)\nnode1 = ClusterNode('10.168.12.50', 5001)\nnode2 = ClusterNode('10.168.12.51', 5100)\nnode3 = ClusterNode('10.168.12.51', 5101)\nnode4 = ClusterNode('10.168.12.63', 6300)\nnode5 = ClusterNode('10.168.12.63', 6301)\ncluserNodes = [node0, node1, node2, node3, node4, node5]\nr = redis.RedisCluster(startup_nodes=cluserNodes, decode_responses=True)\nprint(r.get_nodes())\nreturn r\n</code></pre>"},{"location":"6-%E6%95%B0%E6%8D%AE%E5%BA%93/6.3.Redis/#scan","title":"scan","text":"scanscan_iterscan all <pre><code># Redis \u96c6\u5408scan\u64cd\u4f5c\ndef test_cluster_scan(r):\nr.set(\"a1\", 1)\nr.set(\"b1\", 2)\nr.set(\"c1\", 3)\nfor target_nodes, nodes in zip([\"primaries\", \"replicas\"], [r.get_primaries(), r.get_replicas()]):\ncursors, keys = r.scan(target_nodes=target_nodes)\nprint(cursors, keys)\ncursors, keys = r.scan(match=\"a*\", target_nodes=target_nodes)\nprint(cursors, keys)\n</code></pre> <pre><code>def test_cluster_scan_iter(r, match):\nfor target_nodes in [\"primaries\", \"replicas\"]:\nkeys = r.scan_iter(match=match, target_nodes=target_nodes, count=1000)\nfor key in keys:\nprint(key)\n# r.delete(key)\n</code></pre> <pre><code>def test_cluster_scan_all(r):\nwith open(r'C:\\Users\\KJ00019\\Desktop\\redis\\idc-redis6\\redis-backup-20221118.txt', 'a') as file:\nfor target_nodes in [\"primaries\", \"replicas\"]:\nkeys_all = r.scan_iter(target_nodes=target_nodes, count=1000)\nsize = 0\nfor key in keys_all:\nprint(key)\nfile.writelines(key)\nsize += 1\nprint(size)\n</code></pre>"},{"location":"7-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1/","title":"\u4e3b\u9898","text":""},{"location":"7-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1/#_2","title":"\u6807\u9898","text":"codecodecode"},{"location":"8-Web%E7%BC%96%E7%A8%8B/8.1.Http/","title":"Http","text":""},{"location":"8-Web%E7%BC%96%E7%A8%8B/8.1.Http/#requests","title":"requests","text":"getpost <pre><code>def testGet():\n# \u53d1\u9001\u8bf7\u6c42\nx = requests.get('https://www.runoob.com/')\n# \u8fd4\u56de http \u7684\u72b6\u6001\u7801\nprint(x.status_code)\n# \u54cd\u5e94\u72b6\u6001\u7684\u63cf\u8ff0\nprint(x.reason)\n# \u8fd4\u56de\u7f16\u7801\nprint(x.apparent_encoding)\n# \u8fd4\u56de\u7f51\u9875\u5185\u5bb9\nprint(x.text)\n# \u53d1\u9001\u8bf7\u6c42\nx = requests.get('https://www.runoob.com/try/ajax/json_demo.json')\n# \u8fd4\u56de json \u6570\u636e\nprint(x.json())\n</code></pre> <pre><code>def testPost():\nresp = None\ntry:\n# \u8868\u5355\u53c2\u6570\uff0c\u53c2\u6570\u540d\u4e3a fname \u548c lname\nsendMsgReq = {\n'mobileNo': '18565642572',\n'msgType': '0',\n'msgSendType': '1',\n'merCode': '201809171118250005',\n'templateCode': 'T_FTD_APPLY_ADOPT_01',\n'templateParams': '1,11',\n'msgSignCode': '',\n'msgContent': ''\n}\npostUrl = 'http://10.168.12.97/msg_web/sendMsg'\n# \u53d1\u9001\u8bf7\u6c42\nresp = requests.post(postUrl, json=sendMsgReq)\nprint(resp.status_code)\n# \u8fd4\u56de\u7f51\u9875\u5185\u5bb9\nprint(resp.text)\nexcept Exception as e:\ntraceback.print_exc()\nfinally:\nif resp:\nresp.close()\n</code></pre>"},{"location":"8-Web%E7%BC%96%E7%A8%8B/8.2.Flask/","title":"Flask","text":""},{"location":"8-Web%E7%BC%96%E7%A8%8B/8.2.Flask/#_1","title":"\u63a5\u53e3\u670d\u52a1","text":"posthttp\u8bf7\u6c42\u6d4b\u8bd5 <pre><code>import sys\nimport json\nfrom flask import Flask\nfrom flask import request\napp = Flask(__name__)\n@app.route('/hello', methods=['POST', \"GET\"])  # \u8def\u7531\u89c4\u5219\ndef hello():\nprint(f'request method:{request.method}')\ntry:\n# \u63a5\u6536\u524d\u7aef\u4f20\u8fc7\u6765\u7684\u53c2\u6570\u4e32\nget_data = json.loads(request.get_data(as_text=True))\nif get_data:\nprint(get_data)\nreturn 'hello'\nexcept Exception as e:\nprint(e)\nif __name__ == '__main__':\nserver = sys.argv[1]\nprint(f'\u670d\u52a1\u542f\u52a8\uff1aserver={server}')\napp.run(debug=True, host=server, port=8801, threaded=True)\nprint('\u542f\u52a8\u5b8c\u6210\uff1aserver={server}')\n</code></pre> <pre><code>### Send POST request with json body\nPOST http://10.168.96.41:8801/hello\nContent-Type: application/json\n{\n\"id\": 999,\n\"value\": \"content\"\n}\n</code></pre>"},{"location":"9-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/1/","title":"\u4e3b\u9898","text":""},{"location":"9-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/1/#_2","title":"\u6807\u9898","text":"codecodecode"}]}